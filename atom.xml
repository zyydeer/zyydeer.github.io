<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Zoey&#39;s -个人记录&amp;学习沉淀</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-20T16:38:35.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zoey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test2</title>
    <link href="http://yoursite.com/2019/11/21/test2/"/>
    <id>http://yoursite.com/2019/11/21/test2/</id>
    <published>2019-11-20T16:38:35.000Z</published>
    <updated>2019-11-20T16:38:35.524Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2019/11/21/test/"/>
    <id>http://yoursite.com/2019/11/21/test/</id>
    <published>2019-11-20T16:28:29.000Z</published>
    <updated>2019-11-20T16:28:29.213Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>视频产品浅析：剪辑工具与Vlog社区</title>
    <link href="http://yoursite.com/2019/10/28/%E8%A7%86%E9%A2%91%E4%BA%A7%E5%93%81%E6%B5%85%E6%9E%90%EF%BC%9A%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7%E5%92%8C%E5%86%85%E5%AE%B9%E7%A4%BE%E5%8C%BA/"/>
    <id>http://yoursite.com/2019/10/28/%E8%A7%86%E9%A2%91%E4%BA%A7%E5%93%81%E6%B5%85%E6%9E%90%EF%BC%9A%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7%E5%92%8C%E5%86%85%E5%AE%B9%E7%A4%BE%E5%8C%BA/</id>
    <published>2019-10-28T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.643Z</updated>
    
    <content type="html"><![CDATA[<p>2009年微博诞生后，互联网信息进入全民UGC时代，更多人们开始在网上发现合胃口的个性化内容，碎片化的特点让用户能随时随地进行信息的生产和消费。大屏手机的普及和网络基础设施建设提速降费后，视频开始和文字、图片并列成为了移动端信息传播的载体。</p><a id="more"></a><h2 id="短视频——信息生产消费和技术发展所趋"><a href="#短视频——信息生产消费和技术发展所趋" class="headerlink" title="短视频——信息生产消费和技术发展所趋"></a>短视频——信息生产消费和技术发展所趋</h2><p>流媒体技术的发展让视频播放效果更加清晰流畅，大数据技术让内容分发的个性化准确度提升，图像识别技术在鉴黄鉴暴恐方面对人工审核效率问题的解决，以及人脸识别、AR效果运用在特效上的更多玩法，让短视频创作和消费成为大势所趋。</p><p>全民UGC、碎片化、低门槛，集上述特点于一身，短视频作为一种高效传达信息的媒介方式应运而生。在这条赛道上，目前国内领先的有抖音、快手、火山、西瓜等ugc社区，有作为短视频拍摄工具切入vlog社区的VUE，还有交互出色，视频剪辑功能独具一格的一闪、猫饼等产品；</p><p>而在短视频社区流行起来之前，国内外的互联网市场上已有较为成熟的视频媒体平台：YouTube、Hulu、Netflix、爱奇艺、腾讯视频等，还有从二次元文化发展起来的弹幕视频社区哔哩哔哩。</p><p>按照产品内容机制，可以将目前市场上知名度较高的视频产品粗略划分如下：</p><table border="1"><tr>  <th>类型</th>  <th>代表产品</th></tr><tr>  <td>纯剪辑工具</td>  <td>Videoleap、Quik、大片</td></tr><tr>  <td>工具转型社区</td>  <td>VUE、一闪、猫饼</td></tr><tr>  <td>短视频社区</td>  <td>抖音、快手、西瓜、火山、好看</td></tr><tr>  <td>视频平台</td>  <td>YouTube、Netflix、爱奇艺、腾讯视频、哔哩哔哩</td></tr></table><h2 id="工具型"><a href="#工具型" class="headerlink" title="工具型"></a>工具型</h2><blockquote><p>工具，本质上就是一个放大器，让个体的影响力大幅度地增强。</p></blockquote><p>好的文笔能提升小说的阅读快感，尤其是较长篇幅的小说，必然建立在好的“文笔”基础之上。而对比视频这种内容载体，好的剪辑技巧能明显提升视频观看体验。</p><p>下面来说一说我用过的几款移动端视频剪辑工具：</p><h3 id="Quik——轻松的自动化制作"><a href="#Quik——轻松的自动化制作" class="headerlink" title="Quik——轻松的自动化制作"></a>Quik——轻松的自动化制作</h3><p>Quik是由GoPro推出的一款免费的视频编辑工具，操作简单，它可以自动分析你的照片和视频素材，添加精美的过渡效果，并且按照音乐节拍同步片段内容。</p><img src="https://www.oberlo.com/wp-content/uploads/2018/06/image13.jpg" width = "555" height = "446" align = center><p>最新版本的“闪回”功能会显示用户在最近24小时拍摄的内容，只需轻轻一点就能为这一天创造一个精彩的故事，非常容易上手。</p><p>Quik内置26种视频模版，13款滤镜，90首音乐。如果创建项目时用的素材是照片，精细编辑中除了旋转和字幕，还会有一个对焦选项（对焦是指照片运动时要突出的重点），如果是视频素材，会出现不同的功能图标，可以修改视频时长，旋转视频，更改速度等。</p><p><strong>Quik 的优势：</strong></p><ul><li>完全免费无广告，而且Quik自带的标志可以关掉，这点很良心。</li><li>可以输出1080p/60fps高清画质视频，这点很重要。</li><li>剪辑比较智能，自动生产的画面内容与音乐节奏配合的很好。</li><li>内置的模板效果出色。</li><li>苹果、安卓系统都可以用。</li></ul><p><strong>Quik 的劣势：</strong></p><ul><li>不能精细化编辑</li><li>字幕功能较弱，素材少</li></ul><h3 id="Videoleap——相对专业的自由创作"><a href="#Videoleap——相对专业的自由创作" class="headerlink" title="Videoleap——相对专业的自由创作"></a>Videoleap——相对专业的自由创作</h3><p>不得不说，Videoleap是我用过的移动端剪辑工具中特效功能最强大且全面的一个，如果想要自由创作个性化的效果，Videoleap无疑是最佳的选择。</p><img src="http://wx1.sinaimg.cn/wap720/940764fegy1g4z71wsxvcj20v90hk74y.jpg" align = center><h3 id="关键帧"><a href="#关键帧" class="headerlink" title="关键帧"></a>关键帧</h3><p>videoleap最大的优势是关键帧这一利器，关键帧是制作视频特效时非常重要的功能，它能够让我们更精细准确地控制各种画面变化。配合蒙版、效果、毛刺、滤镜、图层等等的一些功能，可以做出非常多的剪辑特效。这也是被称为手机端Pr的主要原因。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/d902a0bce12bc6fd.png" alt="videoleap"></p><p>除此之外，Videoleap 中还有一些令人惊喜并且实用的功能，操作起来灵活简便。</p><h3 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h3><p>熟悉PS应该知道图层的概念，有了图层功能我们可以更自由地添加素材。在Videoleap中，每一次效果处理都会增加新的图层，图层可以进行排列，还可以分别进行处理，并不会破坏原有的视频。</p><p>每段视频或者图层都可以轻点编辑，拖动边缘可以剪裁。在片段之间还可以添加各种无缝过渡方式。</p><h3 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h3><p>Videoleap 的混合器功能很强大，你可以选择另外一张图片或者视频与原本的视频进行混合处理，可以对添加的图片或者视频进行放大缩小角度调整。 当我们用不同的视频，不同的模式混合图层，就可以产生各种令人惊喜的效果。</p><h3 id="色度键"><a href="#色度键" class="headerlink" title="色度键"></a>色度键</h3><p>电影中的很多特效，需要通过绿幕来合成。所谓绿幕，通俗点说，就是可以像抠图一样去“抠视频”，然后通过素材合成来实现各种效果。</p><p>而videoleap的色度键功能，让我们可以手动合成视频或图像。</p><h3 id="蒙版"><a href="#蒙版" class="headerlink" title="蒙版"></a>蒙版</h3><p>蒙版功能可以用来做转场、分屏以及特效动画。</p><p>简单地说，蒙版的作用就是可以控制哪些地方显示，哪些地方不显示，这也是视频制作中十分实用的功能。举个例子，假如我们想实现在同一个视频画面显示一个人不同的动作状态，可以采用固定机位，分别拍摄人在不同位置的素材，然后把这几段素材用蒙版合成。</p><h3 id="内置特效"><a href="#内置特效" class="headerlink" title="内置特效"></a>内置特效</h3><p>Videoleap自带了40余种滤镜，每种滤镜都可以调整强度。</p><p>而「效果」和「毛刺」功能又可以选择特殊效果增强视频。Videoleap中内置了许多视频特效，如「晕影」「万花筒」「虚焦」「胶片颗粒」「CRT显示器」「像素化」等等……</p><p>在调整功能中，可以对视频的各种例如亮度、对比度等参数进行修改，可以自行调整到最适合视频的参数。</p><h3 id="VUE——创作-分享-互动的vlog平台"><a href="#VUE——创作-分享-互动的vlog平台" class="headerlink" title="VUE——创作+分享+互动的vlog平台"></a>VUE——创作+分享+互动的vlog平台</h3><p>前面介绍的两个是纯工具型的产品，还有一些产品由创作工具向内容社区转型，其中转型最早的便是VUE：</p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572354917542&di=c86be33b7dbcdcb87d2150572339f937&imgtype=0&src=http%3A%2F%2Fi3.hexun.com%2F2019-01-21%2F195949649.png" width = "540" height = "230" align = center><p>VUE于2016年底上线，前期定位为视频创作工具，2017年7月开放了社区模块，之后又在12月发布新版本并将产品更名为“VUE Vlog”，新版本的整个产品都是围绕Vlog设计的，用户打开VUE首先看到的不再是创作界面，而是通过各种各样维度组织的 Vlog 分发界面。</p><p>为了解决用户不知道“拍什么”的问题，VUE新增了许多<strong>频道和专题</strong>，如“曝光我的宿舍日常”“包包里面有什么”“介绍我的沙雕朋友”等，频道多以城市、校园和兴趣聚众，用户加入频道后可以向该频道投稿，而这些新鲜有趣的专题活动就像豆瓣兴趣小组一样，希望用<strong>覆盖目标用户的每一个分享场景</strong>——总有一个场景能激发你的分享欲。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/41816a8832eada22.jpg" alt="VUE的关注页、vlogger推荐、频道/专题"></p><p>用户观看视频时，下方会<strong>滚动评论内容，增强了视频的互动性。</strong></p><p>为了持续激励创作者，VUE在2019年开放了打赏功能，除了点赞评论分享，用户还可以用充值而来的「金币」给博主「加油」。  </p><p>创作者还可凭产出内容的数量和人气获得勋章，解锁不同称号。平台<strong>在精神和物质两方面都给予了创作者一定激励。</strong></p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/200a0f6c85731cbf.png" alt="VUE创作者勋章"></p><p>剪辑工具出身的VUE在vlog拍摄剪辑上的功能也不失专业，用户可加入滤镜、贴纸、文字、音乐等，分段编辑可实现变焦效果（拉远、推进），整体流程还是比较简单。</p><p>在互联网行业，工具型产品转型社区一直少有成功案例。比如转型失败的美图秀秀。而和美图相比，<strong>VUE的优势在于，用户生产的视频在内容消费属性和制作专业性上都更强。</strong></p><h3 id="猫饼o——简单贴心的vlog创作工具"><a href="#猫饼o——简单贴心的vlog创作工具" class="headerlink" title="猫饼ö——简单贴心的vlog创作工具"></a>猫饼ö——简单贴心的vlog创作工具</h3><p>猫饼于2017年7月上线，由vlog创作工具向内容社区转型，2018年被腾讯收购。</p><h5 id="创作引导"><a href="#创作引导" class="headerlink" title="创作引导"></a>创作引导</h5><p>转向社区后，除了设立推荐、关注等内容频道外，猫饼通过“猫饼课堂”<strong>为用户提供视频创作指导，降低参与门槛</strong>，课程内容分为「拍摄基础」「前期拍摄」「后期制作」「摄影、辅助器材测评」几个板块，每个板块都有官方视频教学，从结构和内容组织上都非常贴心且具备专业性。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/8bb3d51e25de4685.png" alt="猫饼课堂"></p><p>（VUE也设立了教学栏目，但内容组织分散，对于有相对精确的学习需求的用户来说体验不够友好，信息获取效率低。）</p><p>除了创作课堂教学，猫饼还持续提供了许多好玩有趣的「<strong>视频模版</strong>」来引导用户参与短视频创作，如“十秒定格”“旅行日志”“一日三餐”“电影打板”等，点击参与后，可以按发布时间和热度浏览不同用户使用此模版发布的视频作品，用户可以选择使用该模版创作，「使用模版」的交互简单自然，易于理解。 </p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/25c3ebe8ba632037.jpg" alt="猫饼特色模版"></p><h4 id="剪辑功能"><a href="#剪辑功能" class="headerlink" title="剪辑功能"></a>剪辑功能</h4><p>猫饼在剪辑功能上力求将<strong>贴纸、字幕功能</strong>做到“同类最好”，并提供了连剪／快剪／跳剪等多种剪辑模式，以及“<strong>一键鬼畜循环</strong>”功能，增强了视频的趣味性。</p><p>有用户抱怨猫饼的剪辑“流程繁琐”，说明它的目标并不是让用户以最快速度捕捉生活中的有趣瞬间（对比朋友圈小视频），而是<strong>让用户学会用短视频讲故事</strong>。</p><p>而贴纸、字幕、电影调色的滤镜，也是为了让用户拍摄、剪辑自己的“视频日记”，扩展视频的表现空间，从而调动普通人<strong>用视频表达的想象力与积极性。</strong></p><h4 id="内容运营"><a href="#内容运营" class="headerlink" title="内容运营"></a>内容运营</h4><p>内容运营上，猫饼开展过“vlogger招募令”、“夏日vlog挑战赛”、以及与同程旅游产品合作的“秋日环游记”等主题联动活动进行引流，鼓励vlog创作。</p><p>不过可以看出，猫饼在社区互动方面功能较单调，交互感不足。</p><h3 id="一闪Onetake——有质感的微动社区"><a href="#一闪Onetake——有质感的微动社区" class="headerlink" title="一闪Onetake——有质感的微动社区"></a>一闪Onetake——有质感的微动社区</h3><p>我一开始接触到「一闪」这款产品，是因为它里面有许多好看的动图，是用户用一闪的动图拍摄和滤镜功能制作出来的。</p><p>不同于一般的动图制作工具，一闪可以拍出胶片电影般的高级质感，用技术方法很大程度上还原胶片效果，现已提供超过70款风格各异的滤镜，含富士、柯达等各式优秀的胶片质感，并在不断推陈出新。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/ccfe2ae29b3c9751.jpg" alt="一闪胶片滤镜"></p><p>一闪中的防抖、定格动画、延时摄影等功能支持以及画面参数调整，让动图和视频变得唯美有趣。除此之外，它还<strong>支持加字发送到微信，变成动图表情，增强了社交属性</strong>，让分享变得更有动力。</p><p>产品还包含着很多优质的交互细节，比如滤镜名称没有用一些晦涩难懂的辞藻，而是用诸如“新宿、涩谷、洛杉矶”这些人们概念里城市的名字，<strong>利用感性名词的认知设计</strong>。爱好文艺及旅行的人对这些地方都有一定的认知。</p><p>一闪最吸引我的地方不只是其优秀的滤镜和编辑功能，而是社区内用户生产的大量高质量内容。拍摄巧思、世界各地风光动态、从不同角度展现的日常生活，在「发现」中可以不断找到让我目光沦陷的内容。  </p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/6ee98fabbeb8092f.jpg" alt="一闪：发现频道、作品和作者"></p><p>该产品早期是通过<strong>邀请制</strong>才能注册使用，也正因如此才聚集了一群有趣的人，在积累了一部分核心用户后，在17年底开放注册，<strong>保证了社区内容的创意和质量</strong>。  </p><p>一闪开放视频剪辑功能后除了产品一直以来的滤镜特色外，另一大优势是其中的音乐曲库，签下了十位全球大牌的vlog音乐制作人，曲库品质较高。  </p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/443105d6fe4647e2.jpg" alt="一闪：创造、配乐"></p><p>剪辑工具固然重要，但<strong>视频是否好看，主要的影响因素是内容主题</strong>。正如小说是否好看，主要的影响因素是故事内容，而不是文笔。因此，从工具起步的产品要做好一个ugc视频社区，在发挥创作指导的优势同时，对于视频内容质量的把控和引导也是至关重要的一步。</p><h3 id="「vlog」视频社区面临的挑战"><a href="#「vlog」视频社区面临的挑战" class="headerlink" title="「vlog」视频社区面临的挑战"></a>「vlog」视频社区面临的挑战</h3><p>Vlog这个词实际上是Video（视频）+Log（日志）两个词的组合，最直白的解释就是“视频日志”，包含了“日常”、“非虚构”、“个人化叙事”等等标签。也因此，Vlog最早就是在以UGC出名的YouTube上兴起的，作为一众内容生产者日常的自我表达载体而存在。</p><p>在YouTube上，无论是Vlog的内容价值还是商业价值都已经得到了验证。  </p><img src="https://ftp.bmp.ovh/imgs/2019/11/c3c52c570e0bb663.jpeg" alt = "Casey Neistat的第一个Vlog"><p>因为摒弃了“套路”和“上瘾机制”，Vlog忠于生活又高于生活的演绎成为人们驻足的理由。不同于短视频社区「短、平、快」的特点，Vlog在内容、用户及传播方面都与短视频这种媒介方式有着显著差异：</p><h4 id="vlog-VS-短视频"><a href="#vlog-VS-短视频" class="headerlink" title="vlog VS 短视频"></a>vlog VS 短视频</h4><table border="1"><tr>  <th> </th>  <th>vlog</th>  <th>短视频</th></tr><tr>  <td>创作</td>  <td>考验运镜和剪辑能力，难度较大</td>  <td>即时拍摄，难度小、门槛低</td></tr><tr>  <td>内容</td>  <td>信息量大、故事性强，强调个人属性</td>  <td>精巧简单，娱乐化</td></tr><tr>  <td>用户</td>  <td>小众，集中于具有较高审美能力的年轻群体</td>  <td>用户范围广，辐射各个年龄层</td></tr><tr>  <td>传播</td>  <td>大部分内容在工具类平台创作，主流社交平台分享</td>  <td>基本上创作平台=分享平台</td></tr></table><p>Vlog内容强调人格魅力这一特点，让优质创作者成为了平台最核心的竞争力。“猫饼”的创始人纯银曾提炼出短视频的创作经验——15秒以下的视频，以生活百态/生活演出/节奏演出/套路演出为主，而15秒以上的视频强依赖剪辑，即依赖有专业剪辑经验的PUGC用户。 </p><p>因此，虽然Vlog在国内小圈子中发展两年有余，头部Vlogger依然屈指可数，而且只在小圈子中出名。除此之外，Vlogger们还面临着以下挑战：</p><ol><li>视频制作难度大（拍摄剪辑门槛高）</li><li>视频内容同质化严重（题材局限于美食旅行日常等，同样内容看多引起厌倦，平台势必要考虑如何帮助创作者突破内容同质化的怪圈。）</li><li>内容变现难（强烈个人色彩和植入商业推广的冲突）</li></ol><p>对于普通人而言，记录生活当然是刚需，这也是VUE 、猫饼等作为工具存在的意义。<br>而Vlog社区这条路面临着很大的挑战，拍摄Vlog的人越来越多，但能制作出优秀内容且有分享意识的创作者仍是少数。缺少「分享性」的内容很难获得受众，更别谈实现商业化，这需要平台对创作者的引导、培养和鼓励，持续激发更广泛用户的创作热情。</p><p>Vlog在国内是一种新兴的内容形式，却也是创作难度更高，爆发性更慢的赛道。</p><p>风起于此，道阻且长。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2009年微博诞生后，互联网信息进入全民UGC时代，更多人们开始在网上发现合胃口的个性化内容，碎片化的特点让用户能随时随地进行信息的生产和消费。大屏手机的普及和网络基础设施建设提速降费后，视频开始和文字、图片并列成为了移动端信息传播的载体。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="视频创作工具" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E5%88%9B%E4%BD%9C%E5%B7%A5%E5%85%B7/"/>
    
      <category term="vlog社区" scheme="http://yoursite.com/tags/vlog%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于社区产品（四）：《status-as-a-service 》</title>
    <link href="http://yoursite.com/2019/10/24/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E3%80%8Astatus-as-a-service%20%E3%80%8B%E5%9C%B0%E4%BD%8D%E5%8D%B3%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/10/24/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E3%80%8Astatus-as-a-service%20%E3%80%8B%E5%9C%B0%E4%BD%8D%E5%8D%B3%E6%9C%8D%E5%8A%A1/</id>
    <published>2019-10-24T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.642Z</updated>
    
    <content type="html"><![CDATA[<p>Eugene Wei在《地位即服务》（StaaS）一文中讲述了社区的三个特点：“效用”、“娱乐”、“社会资本”，并举了很多的例子来证明这三个维度的有效性。</p><a id="more"></a><p>为什么一些巨型社交网络会突然失宠或是被一些新平台颠覆？为什么一些工具没能如期演化成社区，而另一些看似无聊的产品却做到了？为什么有些社交网络随着用户增多反而价值递减？……传统的网络效应理论在似乎无法完全解读社交网络的兴衰现象。</p><p>Eugene Wei是亚马逊战略部门的首位分析师，曾任Hulu、Flipboard 的产品负责人。他在《status-as-a-service 》-地位即服务一文中提出“社交资本”的概念，以此重新审视了社交网络。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【关键词】：效用 娱乐 社交资本 工作量证明 身份认同 网络效应</span><br></pre></td></tr></table></figure><h3 id="效用、娱乐、社交资本"><a href="#效用、娱乐、社交资本" class="headerlink" title="效用、娱乐、社交资本"></a>效用、娱乐、社交资本</h3><p>StaaS文中提到的三个特点分别是：</p><ul><li>娱乐性（entertainment）：用户来这里为了逛的心态，什么好玩看什么，kill time的主诉求</li><li>效用（utility）：用户来这里主要为了实现某种强动机，比如找到某种品牌卸妆油的测评；像Facebook这样的社交网络，用户能够接触到很多很难找到的人。像WhatsApp这样的通讯应用程序，允许我与世界各地的人交流而不需要支付短信费用，这很有效用。Quora、Reddit以及大多数的社交网络，都提供了某种形式的效用。</li><li>社交资本（socialcapital）：用户来这里主要为了来实现社会地位的满足，达到平台发行的某种「工作量证明」，类似于某种货币，常见的比如说QQ的太阳和月亮等级，贴吧的贴吧等级等。</li></ul><p>社区可以从这三个维度来进行分析，也就是为什么用户要来使用这个社区？用户为什么要消费内容？用户为什么要在这里创造内容？</p><h3 id="人是追求身份认同的猴子"><a href="#人是追求身份认同的猴子" class="headerlink" title="人是追求身份认同的猴子"></a>人是追求身份认同的猴子</h3><p>首先，从两个基本原则开始：</p><blockquote><p>1.人是追求身份认同的猴子；<br>2.人们总是希望以最高效的方式获得最多的社交资本。</p></blockquote><p>从这两个对于人性的观察说起，是因为很少有人会对它们提出异议。而关于社交网络，它无疑成就了世界历史上发展最快、规模最大的一批公司，却很少有人从社交地位或社交资本的维度进行过分析。<br>部分原因是社交资本无法量化。数字具有天然的合法性和可信度，但并没有一套同样行之有效的方法来衡量它的价值和转移，至少在准确性和精度上无法和货币资本相提并论。  </p><p>尽管如此，我们研究的大多数社交网络贡献的社交资本远远超过其实际产生的金融资本，特别是在早期。这类公司大多坚定奉行着著名的硅谷定律之一：公司成立之初，应该延迟追求收入增长，而要优先追求规模扩张从而达到网络效应。而对于社交网络为何失去热度、增长乏力、甚至逐渐消亡。我们需要通过社交资本的维度来给出解释。尽管我们无法量化社交资本，但作为高度协同的社会生物，我们仍然可以感知到它。</p><h3 id="传统的网络效应理论对社交网络的分析"><a href="#传统的网络效应理论对社交网络的分析" class="headerlink" title="传统的网络效应理论对社交网络的分析"></a>传统的网络效应理论对社交网络的分析</h3><blockquote><p>电信网络的价值与系统连接用户数量的平方( n^2 )成正比</p></blockquote><p>关于建立成功的社交网络，有一个基本认知，就是当用户数极小时，必须牢牢抓住这些种子用户，通常能够做到这一点是因为产品解决了这些单个用户的痛点。</p><p>这是经典的社交产品冷启动的问题。传统的“鸡生蛋还是蛋生鸡”的问题事实上是有解的：首先得有一只鸡，然后来了另一只鸡，以此类推。问题的难点在于为什么第一只鸡在没有其他鸡的时候来到这里并留下，以及为什么其他鸡会源源不断地跟着来。</p><p>第二个基本认知是，社交网络必须具有强大的网络效应，这样一来，随着越来越多的用户加入，网络呈现几何式扩张，基于网络产生的复合价值随之暴增。在投资人和员工眼中，这无疑预示着公司市场价值的突飞猛进。投资人Chris Dixon那句经典的“<strong>为工具功能而来，因网络效应留存</strong>”，或许是对这个过程最深入人心的描述。</p><p>甚至在社交网络出现之前，我们就从电信网络中发现了梅特卡夫定律：<br><strong>“电信网络的价值与系统连接用户数量的平方( n^2 )成正比”。</strong><br>这种观察，也干净利落地移植到了社交网络上。它是直观的，并且包含了一个数学公式，有力解释了为什么社交网络会快速增长。<br>但这个定律似乎经不起推敲。要理解社区产品的种种现象，还需引入一个核心概念——社交资本。在分析社交网络时，我们应该对社交资本的积累和所谓“地位游戏”的性质和结构进行研究。换句话说，研究这些公司多大程度上利用或是服务了人性的本质，即「人始终追求身份认同、并试图以最高效的方式获取最多的社交资本」？</p><h3 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h3><blockquote><p>新的“地位即服务”产品必须设计一些工作证明，这取决于用一些实际的技能来区分不同的用户。</p></blockquote><p><strong>为什么工作量证明对社交网络至关重要</strong>？ </p><p><img src="http://www.voicer.me/wp-content/uploads/2019/09/011.jpg" alt="image"></p><p>如果人们只是想要最大化获得社会资本，为什么不能让过程尽可能简化？</p><p><strong>因为如果来得太容易，它将没有任何价值，这与加密货币一样。价值与稀缺性正相关，社交网络的稀缺性源于付出劳动，并展示成果</strong>。如果不需要任何技能和努力就能获得所谓社交资本，那么它将一文不值。这并不是说门槛低、大家都能发挥很好的平台就没有用，而是说让人们相对有一些竞争的环境对用户更有激励作用。让我们回到上文提到的原则一：人是追逐社交身份的猴子。所谓身份地位，是相对的。如果每个人都能达到某种地位，那这个地位就完全没有意义，那只是一个“谢谢参与”而已。</p><p>现在有2个产品，一个产品在工具性上很弱，比如只能拍摄15s小视频，只能提供少数的滤镜和贴纸，编辑每条视频的时候都平均耗时更长；另一个产品是工具性上很强，任何一个不出色的女孩子都能在该滤镜下特别漂亮，并不限制时长，又提供了很多的滤镜等等，但从结果上看，前者的产品反而取得了成功（dau和留存都更高），这是为什么呢？</p><p>每一个社区产品的三个维度，有着取长补短的特点。<br>工具性强的产品，人们只是将它当做一个工具，尤其是在毫无区分度的美颜效果上，人类这种动物是十分喜欢比较的动物，在这样的产品里，大部分人在社区的成片效果都是一样的，这就让他们失去了比较彼此地位的乐趣。</p><p>这就解释了“社交资本”在社区产品中的重要性，像是网络电子游戏的东西，你必须流血流汗，付出工作量才能获得平台和其他用户的认可，所以即使某个产品的工具性不那么强，有时候强制用户选择了6秒这样一个只能选择精华片段的时长，就让用户需要绞尽脑汁拼创意，拼颜值，拼制作，在手机面前流血流汗，并为了社交资本乐此不疲。Musical.ly给获取粉丝和赢得身份设置了一些对很多人来说不那么容易突破的障碍。而对另一些人来说，尤其是青少年，特别是年轻女孩子们，这是一个特别适合她们参与并可能获胜的游戏。于是，她们蜂拥而至——这印证了我们前文提到的第二个原则，人们总是寻求最高效的方式来积累最多的社交资本。</p><p><strong>提出一个能够释放如此多人的创造力的约束，正是“地位即服务”业务如何实现产品与市场匹配的方式。</strong></p><p>约束通常带来艺术的优雅，迫使创作者努力克服一个约束，培养专注的努力，而完全无限制的探索无法激发这种努力。</p><p>身份饥渴是一种巨大的潜在能量，这也是“地位即服务”模型的命脉。为了在市场上成功分得一杯羹，各大社交网络都设置了自己独特的身份代币，让用户通过不同的工作量证明来获取。 </p><p>让我们来看一个不太成功的例子，Prisma。它同样主打滤镜，同样试图从工具演化成一个社交网络。它通过优越的算法支撑滤镜，能够轻易把你的照片变成一张精美的艺术画作。App一上线就大受欢迎。</p><p>它非常好用，但问题就是太好用了。</p><p>轻轻一点，任何照片都能华丽变身，那就意味着没有一张照片能脱颖而出。主角是滤镜而非用户，那关注其中任何一个用户而不是其他人就变得毫无意义。如果毫无门槛，那么任何基于技能的社交网络或是身份比拼模型都是不成立的。这就是一个超级实用的工具没能跑通“地位即服务”模式的例子。</p><p>反观Instagram，最早同样是滤镜，用来提升手机拍照的质量，但提升空间非常有限，照片的好坏依然主要取决于摄影师。构图、主题的选择，这些仍然取决于摄影师的水平，滤镜并不会帮你化腐朽为神奇。</p><p>回到先前的问题：如何建立一个新的社交网络。我们需要对这个问题做一些补充和限定。<strong>如果是基于“地位即服务”模式的业务，所要求的工作量证明是需要一些技能门槛的，是要能区分出用户高低的。如果能做到这一点，那么它就为用户创造出了所谓社交货币，如同ICO那样</strong>。</p><p>这当然不是建立社交网络的唯一路径。正如我之前提到的几个维度，你可以撇开社交资本这条路，专攻工具性或娱乐性。但增加了“地位”或者说社交资本这个维度，就能让我们更好地理解，为什么有些社交网络看似完全不实用，却依然获得成功。</p><p><strong>Facebook最初的工作量证明</strong></p><p>你可能一直没搞明白，Facebook区别于MySpace的核心竞争力是什么？它是如何脱颖而出的？Facebook最初只是一些文本的状态更新，谈不上什么本质创新。<br>事实上，Facebook开创性地提出了世界上最著名的工作量证明门槛：你首先必须是哈佛的学生。你得用哈佛的邮箱注册才能使用Facebook，这无疑是全世界最具精英气质的滤镜了，几乎没有其他更能彰显精英人设的产品。</p><p>从哈佛拓宽至常春藤盟校，然后是更宽泛的其他大学，Facebook的用户扩张始终遵循年龄、学历的相对窄众和精英化。</p><p>从更广泛的追逐社交资本的维度来看，获取更多优质异性关注也是生机勃勃的大学生活的重要部分。Facebook的出现可以说是服务了这项世界上最激烈的社交资本竞赛。</p><h3 id="社交资本的投资回报率"><a href="#社交资本的投资回报率" class="headerlink" title="社交资本的投资回报率"></a>社交资本的投资回报率</h3><p>当一个用户在平台上发布一些有趣的内容，多快能收到点赞、回复，得到反馈，获取粉丝？这就涉及到我们先前提到的第二个重点，效率，人们倾向于以最高效的路径获得最多社交资本。他们必须认识到，不同的策略效率不同，当然，大多数人都有这样的认知。<br>年轻人在社交媒体上的使用率更高，是对社交媒体投资回报收期和回报率最敏感的人群。因此，比起Twitter，年轻人往往更喜欢Instagram。</p><p>Instagram虽然没有任何正式的平台内分享转发选项，但它允许用户几乎无限制地打标签，这对确定性更高的主动分发扩散极为有利。Twitter对视觉内容也不那么友好，它对照片尺寸极为苛求，以保证手机每一屏显示一定量的推文。 </p><p>用户在不同平台的社交资本投资回报率通常可以决定平台在不同人群中的市场份额。年轻女孩早年蜂拥至Musical.ly因为她们特别擅长对嘴型、同步舞蹈动作的视频类型，Musical.ly正是对了这部分用户的胃口。在信息爆炸的时代，重度社交媒体用户对于不同平台的ROI极度敏感。</p><p>TikTok是社交媒体中一个有趣的新玩家。因为它的首页，默认的信息流推荐页面是基于算法推荐的，做到了千人千面。反而是你关注的创作者生产的内容被藏在了更深的入口。基于这个机制，如果你是一个新手，那么在TikTok上发布一个内容非常棒的作品，获得的分发将比在那些依赖粉丝量传播的平台上要高效得多。依赖粉丝量传播的平台显然对新手没那么友好。相反，如果你只有一个作品非常棒，其他作品流于平庸，你也不会继续在Tiktok上走运，因为粉丝主要活跃在被Tiktok算法驱动的推荐页，而不是自己的关注页。</p><p>这样的机制造就了在Tiktok上对作品本身的反馈在整个循环中比别的平台更为重要。从理论上来讲，如果算法足够精确，基于用户使用习惯和作品质量做出的推荐会比只看用户自己关注的创作者的作品更接近真正的喜好。那么<strong>一个更高效的ROI是持续吸引并留住新用户的必要条件。</strong></p><p>这个案例另一个有意思的点在于：<strong>聚焦内容本身的机器分发机制可以克服赢家通吃效应的影响</strong>。从本质上讲，一些社交网络会过分奖励那些早期获得大量粉丝的人，无论后续内容是否仍然优质，他们都比其他用户更有优势获取更多关注。<strong>为什么一些大型的社交网络会慢慢失去活力，一个很重要的假设正是，如果这些靠着早期红利起家的“旧势力”不能被及时清零，那么新玩家就根本没有了下场参与的动力</strong>。  </p><p><strong>并不是说旧势力或旧社交资本的存在一定会造成社交网络陷入停滞，而是无论如何界定优劣，社交网络都应该持续优先分发优质内容，不管这个内容是哪个时期的用户生产的</strong>。否则，就会出现一定意义上的社会资本不平等。而在虚拟世界中，退出成本远低于现实世界，新用户可以轻易迁移到一个新的网络，在那里他们的工作可以得到更好的回报且地位提升更容易。</p><p>无论采用何种机制，社交网络都必须投入大量资源在内容与目标受众之间进行市场营销，以便用户感受到足够的工作回报。分配是王道，即使在，或者尤其是关乎社交资本时。</p><p><strong>对于地位驱动的社交网络，为什么照抄现有的工作量证明形式是最糟的策略？</strong>  </p><p>我们经常看到一个新的社交网络复制现有的成功者，只在一些小地方做一些改动。Facebook最近爆出一些用户隐私相关的问题后，我们可能会看到一些隐私优先的社交网络出现。但历史上的教训已经足够我们吸取， App.net和Mastodon是两个典型的抄Twitter的产品，他们也有一些差异化，但它们都建立在和Twitter相同的开放消息的大框架上。  </p><p>大多数抄袭者已经或即将失败。<strong>他们失败的原因通常是他们总是复制已经存在的“地位即服务”模式中的工作量证明形式</strong>。根据定义，如果工作量证明是相同的，那么你<strong>并没有真正创建一个新的地位阶梯游戏，所以当新网络还没有用户时，根本没有理由让用户从现有的网络中迁移过来</strong>。 </p><p>这也不是说你不能通过照搬现有的工作证明取得成功。毕竟，Facebook取代了之前的MySpace这样的社交网络，而在现实世界中，新的资本有时会成为新的“旧资本”。后来者有机会构建更好的地位游戏或创造更有价值的身份形式。<strong>通常，这种新平台颠覆旧平台的动因是效用的提升</strong>，即沿着我们之前坐标体系中的横轴发生了向右位移。</p><p>但如果在同一个地域市场中呢？那么，照抄工作量证明形式是一条艰难的路。已经沉淀了社交关系和积累了用户社交资本的领先的社交网络，会关注到任何能够快速吸引用户的小功能并马上“反向”抄袭，把这些功能嫁接到更为广泛和占主导地位的关系图谱中。先发优势将难以撼动。</p><p>在中国，腾讯迫切希望在短视频领域遏制今日头条的势头，抖音是头号劲敌。腾讯推出了一个类似的产品，但增加了一项功能，让用户可以在任意短视频里小框插入自己拍摄的对应视频。字节跳动大约只花了半秒时间就将这个功能整合到抖音中，名叫“抢镜”。而在字节跳动的海外产品TikTok中，这个名叫React的功能已经是整个App里的热门功能了。<strong>如果后来的挑战者不能彻底颠覆现有的工作量证明体系，那么复制和扼杀是现任者的有效策略</strong>。</p><p>更不用说批发式的照搬了。即使在中国，尽管对知识产权保护还比较宽松，用户同样会在应用商店对公然模仿者发表差评。中国用户可能没有意识到一些产品是照搬了美国模式却弯道超车的，但在同类的中国产品中，用户不会无缘无故迁移到一个彻头彻尾的山寨App中去。<strong>迁移的动力必须足够弥补迁移成本</strong>。</p><blockquote><p>一旦社交网络达到规模，沉淀下来的社交关系就是其最独有的价值。</p></blockquote><p>某些功能和特定社交关系的独特组合，是任何网络最关键的竞争优势。如果我们不能复制其关系图谱，单纯复制某些网络的功能通常是不够的，但如果你可以将该功能应用于您通过其他方式获得的某些社交关系图谱中，它将可以成为一种具有壁垒的竞争优势。</p><p>Facebook曾试图通过复制阅后即焚功能从Snapchat上赢回年轻人，Facebook还试图用Lasso复制TikTok。Facebook试图复制过所有市面上受欢迎的社交软件的某些功能……没有什么比Facebook的以上尝试都以失败告终更有说服力。<strong>复制Snapchat失败的核心原因在于，年轻人之所以离开Facebook转投Snapchat很大程度上是因为Facebook已经被父母们入侵了</strong>。你不会因为你父母的派对上也有娱乐项目就离开你同学的派对转而参加你父母的局，就是这个道理。</p><h3 id="社交资本的通胀"><a href="#社交资本的通胀" class="headerlink" title="社交资本的通胀"></a>社交资本的通胀</h3><p>社交资本一定是会通胀的，举个例子来说，我在头条号早期的一篇文章可以很轻松的突破5万的阅读量，但现在入场的玩家多了起来，现在我的阅读量非常稳定的在100-1000之间，所以说社交资本有其红利期，早期的社交资本易于获得，而后期社交资本一定会面临通胀的魔咒，这里边有两层意思：</p><p>第一层意思：几乎所有社交资本的社区，都会在顺利发展的时候到达引爆点，这时候社交资本的通胀已经非常严重，老牌的资深KOL可能会面临出走的风险，如果这时候平台还没有将工具性和娱乐性做到极致，可能会面临灭顶之灾。</p><p>比如说逆水寒这款游戏十分依赖pdd这种顶级玩家，而顶级玩家的在线删号基本会对游戏造成毁灭性的打击。如果这时候社区没有足够强的工具性和娱乐性的支持，只靠社交资本支持的社区都会在这种引爆点之后走下坡路。</p><p>第二层意思：社交资本本来就存在胜者诅咒，原文的作者举了一个十分有趣的例子，facebook的ugc遇到的一个重大瓶颈就是它的规模太大了，导致不仅每个孩子都有了fb，而且他们的父母也都有了fb，大多数人的状态并不想让他们的父母看到，所以他们转而投诚了Snapchat这种年轻人的社区。</p><p><img src="http://www.voicer.me/wp-content/uploads/2018/10/ezgif-3-696f6354f7.gif" alt="image"></p><p>胜者诅咒是个很难解的问题，Facebook用Stories的办法解决了这个问题，多闪和微信小视频基本都是这样的一个概念，不得不说这是个通达人性的产品设计。因为这些内容并不会出现在发布者的个人主页上，只需要分享当下，不用去管这些内容质量是否足够高，能不能在日趋激烈日常发布大比拼中脱颖而出。在这个功能下，机器算法打散了你发文的序列，Stories也允许有天赋的创作者创建连续的故事。</p><p>因此，<strong>Stories本质上是关于降低用户的发布障碍和一种新的讲故事方法的创新</strong>。任何增长下降的多边网络都会尝试在某个时候将这种形式嫁接到自己的网络上，以解决供给方（创作者）的面子问题。</p><p>具有讽刺意味的是，随着Instagram在Stories中添加越来越多的滤镜和功能，我们看到其中的工作量证明游戏不断升级。今天的许多Instagram Stories比日常帖子更精细、更耗时。 Stories作者采用各种滤镜、贴纸以及GIF和其他工具使常规Instagram帖子的滤镜相形见绌。最初主打“轻内容”的发布形式，居然演化成了最复杂和精致的样子。你可以把猴子从一个身份竞赛的游戏中拿走，但你永远无法让它们停止一颗追逐身份认同的心……</p><h4 id="降低社交资本贬值风险，以及Snapchat的应对战略"><a href="#降低社交资本贬值风险，以及Snapchat的应对战略" class="headerlink" title="降低社交资本贬值风险，以及Snapchat的应对战略"></a>降低社交资本贬值风险，以及Snapchat的应对战略</h4><p>在去年年底Evan Spiegel提到了Snapchat的核心价值观——成为最高效的沟通方式。<br>我们最持久有效的增长方式是不懈地专注于成为最高效的沟通方式。<br>在2019年其重心重新放到“让Snapchat成为最快沟通方式”。这样就可以为尚未开始用Snapchat的数十亿人传递核心价值。</p><p>如果Snapchat无法做到这个核心价值，也就没有机会释放相机的全部功能。</p><p>如果有增值功能会降低这一核心产品价值，我们可能要针对不同市场对产品作调整。<br>Snapchat将沿着工具性的坐标轴发力，为此不惜在社交资本的维度有所牺牲，而正如我们之前提到的，<strong>把长期业务完全建立上社交资本上，是不够稳定的</strong>。</p><p>许多人会说（特别是Snapchat自己），它一直是反Facebook的。 因为它没有“点赞”按钮，将人们从万恶的地位游戏中解放出来。 其实这一点低估了人类把各种社交网络当做战场，来玩地位游戏的聪明才智。</p><p>还记得Snapchat最早时候的最佳好友列表吗？ </p><p>这是一个为青少年打造的，纯粹的身份游戏功能。<strong>它不仅展示了你最亲密的三个人，还可以看到你任何联系人的三个最好的朋友。本质上讲，它公开了每个人“友谊”的等级，以及人气记分牌</strong>。而老一辈的人就算摸清了怎么用Snapchat，可能也不会参与那种地位游戏。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/11b17d6741b64346.jpg" alt="Snapchat-最亲密的3个好友"></p><p>至于怎样才能获得这个“超级好朋友”的地位，你不会想知道它的工作量证明的。</p><p>与粉丝数量和点赞一样，“最好朋友列表”是人们积累特定形式社交资本的机制。 然而，从平台角度来看，这个功能存在一个很大的问题：每个用户只能有一个最好的朋友。 它对人们可以竞争和积累的社会资本总量人为设置了上限。</p><p>Snapchat后来做出了一个明智的改变：放弃了受欢迎的“最佳朋友列表”，而用Streaks代替。<strong>Streaks是用一个表情符号来显示连续密切互动的好友，旁边的数字则表示你们持续联系了多少天。此举瞬间解锁了社交资本积累的上限，并将零和博奕变成积极的非零和博奕，激发了用户更热衷参与</strong>。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/df85c92342ff7373.jpg" alt="Snapchat-Streaks"></p><p>如果你和一个朋友连续几天来回Snap，你会在朋友列表中得到这个象征友谊的表情符号。年轻人迅速全心全意投入到与朋友建立和保持密切互动的过程中。 这实际上是在量化和跟踪友谊，并将其作为工作量证明。</p><p>当然，Steaks的美妙之处在于无上限。如果你愿意，你可以和尽可能多的朋友拥有这种友谊的小标记。如果你认为社交资本没有价值，那么你是从来没有见过，一个年轻人度假时没法用手机，或者在没有手机或WiFi时，看到他们的友谊小标记消失时伤心哭泣。因为间隔一定时间没有互动，你们之间的友谊小标记就会消失。所以有些孩子如果不得不出国度假，会让朋友用他们的手机，帮忙保持和朋友间的互动来维持自己的小标记不消失，就像是为自己的社交资本请了个保姆或代理人一样。</p><p>有趣的是年轻人是如何<strong>高效地维护自己的友谊小标记</strong>的。他们已经训练有素，快速划过朋友列表，随机发一些内容，只是为了在间隔时间倒计时走完之前完成一次互动。</p><p>当然，因为社交资本结构具有其脆弱性，友谊小标记也开始失去热度。 Snapchat的许多年轻用户不再深陷其中。<strong>社交资本游戏总是不稳定的，容易发生突然和大规模的贬值，但当它们奏效时，真的让人沉迷</strong>。当然，这种社交功能也有实用的一面。比如，对于经常用Snapchat的人，发消息时最好朋友列表在通讯录中置顶的功能可以节省大量时间。社交资本和工具性往往不能彻底分开。</p><p>基于社交资本的不稳定性，以及在社交资本的赛道上有Instagram这样更旗帜鲜明的对手，对于Snapchat来说，往工具性的方向发力并不是一个糟糕的策略。但它的难点在于：<strong>在通讯软件这个赛道想要建立任何可持续的壁垒都无比艰难。在技术范畴，可以认定，任何功能都是可以被复制的</strong>。从盈利角度来看，信息传递可能永远不会是最有利可图的业务。</p><p>值得一提的是，Snapchat还通过“发现”页增强其娱乐功能。几乎所有达到一定规模的社交网络都会兼具社交资本、工具属性和娱乐属性这三个维度，但每个社交网络都会有自己的侧重点。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/264adfbad9272ffb.jpg" alt="image"></p><p> <strong>为什么Path这个产品会失败</strong>？<br>像 Path 这样的社交网络试图将你的社交图大小限制在邓巴数字上，限制你的社交资本积累潜力，限制你的帖子分发。他们希望这次交流更加透明，更加真诚地表达自己，反facebook。不幸的是，正如社会资本理论可能预测的那样，Path确实成功地成为了反 facebook的网络：一个没有足够用户的网络。<br>这类的产品就算活下来，也是估值偏低的，毕竟网络效应的价值取决于网络中人数的平方。如果某个城市中只有2部有线电话，则这个有线电话网络一定无法构建，但如果一个城市中一半以上的人都可以用有线电话找到，那这个城市里的大多数人才会开始考虑要不要自己也安装一个有线电话，接入到这张人际的大网中。</p><p><strong>如何让自己的产品延长半衰期</strong>？<br>主要是找到新的工作量证明的形式，如果某个资本将要到达临界点了，就用另一种新的证明形式，将大家重新引入到这个身份认同的游戏之中，但是否能真的make sense还是要看新的证明形式是否吸引人，取得社区的认同。Instagram的做法是从方形照片到取消了图像的长宽比限制，增加了视频格式，延长了视频时长限制，并增加了像Boomerang和 Stories 这样的格式。</p><blockquote><p>如果我们认为这些社交网络只是信息交易的市场，而不是地位交易市场，那么我们只是看到了这个机器的一部分。</p></blockquote><p>从社会资本的角度出发，可以解释社交网络为何会失去热度、停滞不前，有时甚至完全消失。虽然我们可能无法量化社会资本，但作为高度协调的社会生物，我们可感觉到它的存在。</p><p>在许多方面，社会资本要比金融资本更加领先。对它的性质进行更多的研究，不仅是一个好的投资或商业实践，也有助于解释各种不合理的网络行为。</p><hr><p>《status-as-a-service》原文：<a href="https://www.eugenewei.com/blog/2019/2/19/status-as-a-service" target="_blank" rel="noopener">https://www.eugenewei.com/blog/2019/2/19/status-as-a-service</a><br>本文部分内容参考：金沙江创投 《地位即服务——重新审视社交网络》 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Eugene Wei在《地位即服务》（StaaS）一文中讲述了社区的三个特点：“效用”、“娱乐”、“社会资本”，并举了很多的例子来证明这三个维度的有效性。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="社区" scheme="http://yoursite.com/tags/%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】用户力：需求驱动的产品、运营和商业模式</title>
    <link href="http://yoursite.com/2019/10/20/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91%E7%94%A8%E6%88%B7%E5%8A%9B%EF%BC%9A%E9%9C%80%E6%B1%82%E9%A9%B1%E5%8A%A8%E7%9A%84%E4%BA%A7%E5%93%81%E3%80%81%E8%BF%90%E8%90%A5%E5%92%8C%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/10/20/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91%E7%94%A8%E6%88%B7%E5%8A%9B%EF%BC%9A%E9%9C%80%E6%B1%82%E9%A9%B1%E5%8A%A8%E7%9A%84%E4%BA%A7%E5%93%81%E3%80%81%E8%BF%90%E8%90%A5%E5%92%8C%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-10-20T03:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.641Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自读郝志中《用户力：需求驱动的产品、运营和商业模式》一书的笔记。</p><h2 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h2><p>用户需求：就是一个“更”字</p><p>在互联网时代不要寄希望于找到用户的各种需求空白，而是在此基础上思考，如何通过互联网新技术、模式或者思维，更好的、极致的满足这些需求。</p><blockquote><p>更快、更多、更便宜、更好玩</p></blockquote><ol><li>发现需求（更极致满足用户需求、确定高频用户）</li><li>分析需求（需求采集4m、需求提炼2r）</li><li>描述需求（画像、文档、故事）</li></ol><h3 id="需求采集——调查问卷、访谈、可行性测试、数据分析"><a href="#需求采集——调查问卷、访谈、可行性测试、数据分析" class="headerlink" title="需求采集——调查问卷、访谈、可行性测试、数据分析"></a>需求采集——调查问卷、访谈、可行性测试、数据分析</h3><p>用户访谈／调查问卷／可用性测试／数据分析<br>定性的说／定量的说／定性的做／定量的做</p><p>可用性测试：主要方式是邀请用户实际使用产品，在用户使用产品的过程中，观察用户遇到的问题，从用户实际产品使用行为来分析用户需求。</p><p>用户访谈“<strong>发现</strong>需求”，可用性测试“<strong>验证</strong>需求”<br>调查问卷和数据分析<strong>量化</strong>需求。</p><h3 id="需求提炼：2个结果"><a href="#需求提炼：2个结果" class="headerlink" title="需求提炼：2个结果"></a>需求提炼：2个结果</h3><ul><li>通过需求的筛选过滤，确认用户的需求是什么，进行排序</li><li>通过需求的筛选过滤，确认用户是谁，进行分级</li></ul><h3 id="描述用户需求：3种形式"><a href="#描述用户需求：3种形式" class="headerlink" title="描述用户需求：3种形式"></a>描述用户需求：3种形式</h3><ul><li>一个文档：用户需求文档</li><li>一个画像：目标用户群主要特征的提炼。具化形象引起感性共鸣、集中资源，明确目标，提升效率为用户服务</li><li>一个故事：用虚拟故事将典型用户的需求和应用场景进行描述</li></ul><h2 id="产品设计：核心是用户需求"><a href="#产品设计：核心是用户需求" class="headerlink" title="产品设计：核心是用户需求"></a>产品设计：核心是用户需求</h2><h3 id="产品定位"><a href="#产品定位" class="headerlink" title="产品定位"></a>产品定位</h3><blockquote><p>一句话说明白，做什么，做给谁，做啥样</p></blockquote><p>产品设计框架里3大关键：产品决策—功能设计—用户体验</p><h3 id="产品决策：需求评估、竞对分析、内部资源分析"><a href="#产品决策：需求评估、竞对分析、内部资源分析" class="headerlink" title="产品决策：需求评估、竞对分析、内部资源分析"></a>产品决策：需求评估、竞对分析、内部资源分析</h3><blockquote><p>有时决定不做比做更重要</p></blockquote><p>产品决策关键点：用户需求驱动是产品决策的核心，需求不成立，决策不做；需求成立，再考虑其他因素。宁可花费更多的时间做决策，也不要着急地开始产品设计和开发。决策做了，就要做得最好。</p><p>用户需求驱动，就是由用户需求来驱动产品决策。需求的验证一定要避免自我经验的推断，真实需求不能来自简单的模仿、公司资源和战略规划、竞争压力及领导喜好。真实存在的需求，只能来自实实在在的用户，来自用户需求的分析。<br>竞争分析：市场领先者有没有致命的弱点（不是体现在资源少、技术差和产品丑，而是集中体现在市场领先者还没有更好地满足用户需求 ）、有没有潜在的进入者（如滴滴和快的合并，也是为了抵御Uber这个潜在的进入者）。</p><h3 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h3><ul><li>基础功能（不破坏用户习惯）：基础功能的设计建议主要通过“抄”来实现，因为互联网发展二十年，很多基本的功能形态都已经定型，用户对通用的基础功能已经形成使用习惯，从注册、登录阅读、评论到搜索、聊天、支付等，都有非常成熟优化的功能案例可以参考。把优秀产品的功能点学习过来，也是一种能力和创新。</li><li>核心功能（立身之本）：别的产品所不具备的，一种满足用户需求的能力。</li></ul><p>所以产品设计的难点不是基础功能，而是建立在基础功能上对核心功能的设计，核心功能是产品的立身之本。</p><blockquote><p>找到核心功能—&gt;强化核心功能。</p></blockquote><h3 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h3><ol><li><strong>不要强迫用户</strong>：例如进入必须注册才能使用，MSN必须关联hotmail邮箱。让用户给有所选择。（但选择也不能太多，否则适得其反。） </li><li><strong>不要让用户思考</strong>：设计出使用门槛最低的产品我们习惯用自己的经验和技能做判断，这样做容易犯的错误是用自己的需求替代用户的需求。（过多的选择会导致用户陷入无尽的思考中）  </li><li><strong>简单易操作</strong>。微信1.0版本只支持聊天、发图片和换头像。</li><li><strong>不破坏用户习惯</strong>（视觉习惯、使用习惯）（产品要优化，但不要一次性颠覆改变，会直接破坏用户使用习惯）</li><li><strong>超出用户预期</strong></li></ol><h2 id="网络运营"><a href="#网络运营" class="headerlink" title="网络运营"></a>网络运营</h2><p>产品一上线就是运营，运营绝对不是网络推广，而是围绕获取用户展开的各项工作，在不断满足用户需求及完善产品基础上，以持续获取用户和提升用户活跃度为目标的一系列工作 。</p><h3 id="运营指标"><a href="#运营指标" class="headerlink" title="运营指标"></a>运营指标</h3><p>网络运营模型是描述用户使用产品的流程，分为访问的用户、转化的用户、活跃的用户和留下来的用户4个环节。</p><ol><li>来源量（老用户+新用户）：每天来的用户人数；</li><li>转化率（有效用户/所有用户（来源量）×100%）：成为真正用户的比例；</li><li>活跃度（用户行为次数/用户数）：用户使用产品的程度；（PV/UV 销售额/付费用户数 用户行为次数/用户数）</li><li>留存率(运营成功的关键)：转化成老用户的比例(沉淀用户数/新用户总数×100</li></ol><h3 id="运营周期"><a href="#运营周期" class="headerlink" title="运营周期"></a>运营周期</h3><h4 id="种子期运营—留存率是关键"><a href="#种子期运营—留存率是关键" class="headerlink" title="种子期运营—留存率是关键"></a>种子期运营—留存率是关键</h4><p>钟子期产品应该是《精益创业》所定义的MVP（minimum viable product最小化可行产品），是指能够代表产品思路的、最小化功能的、可用性的产品。通过投入市场运营快速验证用户需求，检验产品核心功能是否能抓住用户。</p><p><strong>种子期运营方法：</strong>  </p><p>确定种子用户。在需求分析中建议将用户分为普遍用户、目标用户和粉丝用户。种子用户就是在粉丝用户中筛选和发展的用户群体。</p><ul><li>事件法：适合内容型产品。  </li><li>地推法：O2O  </li><li>马甲法：水军，大量发评论，点赞等。机器人聊天，回复</li><li>传染法：口碑、趣味性关系链传播。例如开心农场、买卖奴隶、微信红包  </li></ul><p><strong>种子期运营目标：</strong>  </p><p>1 确定第一批种子用户是谁，在哪。</p><p>2 来源量、转化率、活跃度适当即可，关键是留存率。（自然留存率，不要做奖励或补贴等手段）</p><p>留存好则说明产品核心功能获得用户认可，继续完善；留存不好，说明种子用户群偏差，也可能是产品核心功能不明确，或者不能满足用户需求，需要读产品快速迭代，二次验证。</p><h4 id="爆发期运营：提高来源量"><a href="#爆发期运营：提高来源量" class="headerlink" title="爆发期运营：提高来源量"></a>爆发期运营：提高来源量</h4><p>快速迭代。根据新涌入的用户需求，对产品进行完善和调整，一定要快。微信2011年15个版本。（迭代一定要围绕核心功能展开）</p><p><strong>爆发期运营目标</strong>：  </p><p>拉来更多的用户。也就是来源量。</p><p><strong>爆发期运营方法</strong>：</p><ol><li>买流量。（搜索引擎，导航网站，应用商店……）</li><li>傍大款：与大得渠道和平台合作，通过其他形式的利益换取大渠道和平台的用户导入。</li><li>靠关系：同事、同学、朋友的关系链。关联手机通信录、微信、微博好友等等</li><li>装有钱：做用户补贴。满减、折扣红包、拉人送钱等方式</li></ol><h4 id="平台期：只为活跃度-服务好现有客户"><a href="#平台期：只为活跃度-服务好现有客户" class="headerlink" title="平台期：只为活跃度 服务好现有客户"></a>平台期：只为活跃度 服务好现有客户</h4><p>平台期运营不在于提升来源量，而在于将运营工作集中在产品内部，完善运营流程，建立用户体系，加强产品的用户体验和新产品的开发工作。</p><p>平台期产品主要是：提升用户体验，推出眼神产品火功能，提高系统稳定性。</p><p><strong>平台期运营目标</strong>：</p><p>活跃度指标的提升，为下一个爆发期做准备。</p><p><strong>平台运营方法</strong>：</p><ol><li>举办活动（线上征文／抽奖／游戏等，线下比赛／评选／聚会等）</li><li>用户等级。通过用户等级刺激用户活跃度</li><li>新功能拉动。（例如微信朋友圈）</li></ol><p>另：如果平台期是在产品自然发展、用户开始衰减时出现，说明产品核心功能还不够强，运营的关键时解决产品的根本问题，同时通过活动／用户等级货新功能拉动，维持用户活跃度。</p><h3 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h3><p>网络推广转化率的提升关键，应从用户需求和体验出发，做到以下3点：优化推广页、产品页引导、用户流程细节。</p><p>渠道页：用户来源渠道的页面<br>推广页：从渠道跳转到产品的第一个页面，吸引用户产生后续使用的页面<br>产品页：从推广页进入用户使用产品的页面</p><p>网络推广中产品与渠道合作的方式有3种：<br><strong>用户互导、资源互换、流量购买。</strong></p><p>（1）链接互换／网站广告／内容区／seo<br>（2）客户捆绑安装<br>（3）app内置换量（app内部推荐区域）</p><h4 id="渠道优化：增加来源量"><a href="#渠道优化：增加来源量" class="headerlink" title="渠道优化：增加来源量"></a>渠道优化：增加来源量</h4><ul><li>++PC端++主要的渠道类型分为6种：搜索引擎、导航网站、社交产品、客户端、内容网站和流量联盟。<br>每个渠道类型都有代表性的产品，针对不同类型的渠道，推广的方式也不同，主要有<strong>内容型渠道、社交型渠道、搜索引擎、流量渠道</strong>。</li></ul><ul><li>++移动端++渠道推广分为安卓和苹果iOS两大渠道，如苹果端主要有：精品推荐、搜索优化、排行榜</li></ul><h4 id="网络推广形式"><a href="#网络推广形式" class="headerlink" title="网络推广形式"></a>网络推广形式</h4><p>（1）打扰式推广：用户不需要，强推给用户，如下载时的弹出窗口、APP遮挡屏幕的全屏广告等，都是打扰式推广。主要目的是纯流量推广，作用是曝光，针对性不强，强迫用户观看，推广转化率差，但是曝光量大。  </p><p>（2）吸引式推广：用户不需要，但是不影响用户使用，在用户使用产品的旁边，如看文章旁边的电商广告、小说APP下边的广告等，引导用户使用。一般引导式推广是根据用户数据的精准投放，主要目的是促进用户转化，不会打扰或强迫用户，注重用户体验，希望获得用户好感。   </p><p>（3）需求式推广：用户有需要，推送给用户的推广形式，如在百度搜索关键词，竞价广告就是需求式推广。通过用户主动输入关键词，或对用户行为进行数据分析，推广素材与用户精准匹配，推广内容可以满足用户需求，提高用户推广效率。</p><h2 id="商业模式，等同于用户价值模式"><a href="#商业模式，等同于用户价值模式" class="headerlink" title="商业模式，等同于用户价值模式"></a>商业模式，等同于用户价值模式</h2><h4 id="互联网商业模式的3个特点："><a href="#互联网商业模式的3个特点：" class="headerlink" title="互联网商业模式的3个特点："></a>互联网商业模式的<strong>3个特点</strong>：</h4><p>（1）收入是商业模式的结果，互联网商业模式是用户价值的模式，长期多次变现，不是一次性产品销售模式。</p><p>（2）互联网商业模式是规模收入的模式，没有大量用户，不能形成规模收入。</p><p>（3）互联网商业模式是后向收入的模式，先免费才能赚大钱。</p><p>互联网商业模式的价值=用户数×（产品1价格+产品2价格+产品3价格等）×频率，所以产品收入是受用户规模、用户属性和变现能力3个因素共同影响的。</p><h4 id="最常见的4种收入方式："><a href="#最常见的4种收入方式：" class="headerlink" title="最常见的4种收入方式："></a>最常见的4种收入方式：</h4><p><strong>广告、游戏、电商和会员。</strong><br>但是无论哪种收入方式，从本质来看就两种：<br>（1）广告：获得用户后，将用户卖给别的广告主，平台不和用户产生交易。<br>（2）电商：获得用户后，向用户销售产品，平台和用户产生交易。</p><p>用户需求产生收入，只有更好地满足用户需求，才能设计出优秀的产品，从而获得大量的用户，才有可能通过广告和电商获得收入。</p><blockquote><p>产品是收入的前提，运营是收入的过程，所以用户需求驱动是产生收入的驱动力。</p></blockquote><p>商业模式的结构有3种，分别是</p><ul><li>单边型（卖方和买方）</li><li>平台型（平台和买卖双方）</li><li>增值型（核心产品和多业务方）</li></ul><p>虽然商业模式不能被设计，但是可以确定的是，要遵循的规律一直不变，那就是做对用户有价值的事情，聚集海量的用户，收入自然会产生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文来自读郝志中《用户力：需求驱动的产品、运营和商业模式》一书的笔记。&lt;/p&gt;
&lt;h2 id=&quot;用户需求&quot;&gt;&lt;a href=&quot;#用户需求&quot; class=&quot;headerlink&quot; title=&quot;用户需求&quot;&gt;&lt;/a&gt;用户需求&lt;/h2&gt;&lt;p&gt;用户需求：就是一个“更”字&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>产品设计背后的心理学——from《硅谷思维》</title>
    <link href="http://yoursite.com/2019/10/19/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E8%83%8C%E5%90%8E%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E2%80%94%E2%80%94from%E3%80%8A%E7%A1%85%E8%B0%B7%E6%80%9D%E7%BB%B4%E3%80%8B/"/>
    <id>http://yoursite.com/2019/10/19/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E8%83%8C%E5%90%8E%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E2%80%94%E2%80%94from%E3%80%8A%E7%A1%85%E8%B0%B7%E6%80%9D%E7%BB%B4%E3%80%8B/</id>
    <published>2019-10-19T03:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.641Z</updated>
    
    <content type="html"><![CDATA[<p>如何设计一款好用的产品？</p><p>答案是，不仅要提供一个解决方案，还得让用户舒服地、主动地、渴望地接受。</p><a id="more"></a><h3 id="谷歌产品设计背后的心理学"><a href="#谷歌产品设计背后的心理学" class="headerlink" title="谷歌产品设计背后的心理学"></a>谷歌产品设计背后的心理学</h3><h4 id="决策压力、唤起恐惧效应"><a href="#决策压力、唤起恐惧效应" class="headerlink" title="决策压力、唤起恐惧效应"></a>决策压力、唤起恐惧效应</h4><p>谷歌机票搜索为什么按价格排序？</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/867803d7dbefb123.jpg" alt="image"><br>在影响乘客航班选择的诸多因素里，“机票价格”是最重要的因素，所以按价格推荐机票，用户很快就能做决定。</p><p>相比之下，“是否直飞”“飞行的时间”则没那么重要。试想如果按起飞时间推荐，用户还会考虑去机场路上会不会堵车、是否在飞机上吃饭等复杂因素，只会让决策变得困难。</p><p>所以，谷歌搜索引擎会把低价机票放在显著位置，并且用醒目字体显示；同时还会显示一张高价机票作为衬托，让用户觉得低价机票“真实惠”，从而尽快下单。</p><p>当需要很多个步骤完成交易流程，每个选择步骤都有一定的“放弃率”<br>。先突出“价格”选择，再提供“时间”对比；<strong>决策的难度在升高，其实是让他们的“决策压力”成本逐渐升高，以免中途放弃。</strong>  </p><p>最后一步提示：“在3小时内，将会54%的价格上涨概率”，<strong>唤起恐惧效应</strong>。</p><h4 id="选择悖论、对比效应"><a href="#选择悖论、对比效应" class="headerlink" title="选择悖论、对比效应"></a>选择悖论、对比效应</h4><p>谷歌机票航班搜索结果分区显示：最佳航班、其他航班。  </p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/47102f1f0acf5ca9.jpg" alt="image"></p><p>相比不分区的实现方式，预订成交量显著增加。</p><p>这就是心理学上著名的「<strong>选择悖论</strong>」—— 在选项过多的时候，会增加决策难度，很多人索性放弃选择。而给用户更少选项时，决策效率会提升很多，所谓“少即是多”。 </p><p>最佳航班区有3个选项，第3个选项时段不好还很贵，但它的存在其实促使用户更快完成选择。其背后便是「<strong>对比效应</strong>」在发挥作用。<br>虽然用户不会选，但是经过这样的价格对比，用户会觉得自己占了大便宜。同时还使Google获得了极高的用户满意度。</p><hr><h3 id="使用场景不同，用户的需求就不同"><a href="#使用场景不同，用户的需求就不同" class="headerlink" title="使用场景不同，用户的需求就不同"></a>使用场景不同，用户的需求就不同</h3><ul><li>微信为什么没有“已读回执”功能？</li></ul><p>我们都知道，微信是熟人社交，“已读回执”只会增加消息发送方和接收方的心理负担。</p><p>对比之下，陌陌是陌生人社交，“已读不回”反而能加快沟通速度和关系进度：“知道没戏了，赶紧去找别人聊天就对了。”</p><p>钉钉是职场社交，对“已读回执”功能进行了重点强化，虽然会给员工造成焦虑，但也提高了工作效率。</p><ul><li>谷歌地图为什么好用？  <blockquote><p>好的产品不是尽可能多地展示信息，而是根据用户需求，实时对信息进行取舍。</p></blockquote></li></ul><p>比如，你在查找一家餐厅时，关心的是“餐厅在哪儿？”所以谷歌地图会尽可能多地展示餐厅附近的设施、地铁站和道路，让你一眼了解区域概况。</p><p>点击了餐厅以后，你更关心的是：“我应该怎么去那？”所以谷歌会把地图整体背景变暗，以突出街道名称，并且把无关地点标记隐去。</p><h3 id="页面不同，用户感知到的价值就不同"><a href="#页面不同，用户感知到的价值就不同" class="headerlink" title="页面不同，用户感知到的价值就不同"></a>页面不同，用户感知到的价值就不同</h3><ul><li>进度条为什么总卡在99%？<blockquote><p>通常来说，进度条并不能反映真实的任务处理进度，它们的唯一作用是给用户提供心理安慰，延长用户对等待时间的耐受度。</p></blockquote></li></ul><p>有“心机”的互联网产品，会把进度条设计成先快后慢的效果：都加载到99%了，你一定不甘心关闭页面，会一直等到加载完成。</p><p>体验最好的是“话痨”进度条，在加载的时候，告诉用户它有多努力。比如，机票搜索页面如果加上一行文字：“我正在搜索国航机票”“我现在搜索瑞士航空”……就能<strong>显著提高用户“感知价值”</strong>，尽管产品的“实际价值”没变。</p><h3 id="流畅度不同，用户的注意度就不同"><a href="#流畅度不同，用户的注意度就不同" class="headerlink" title="流畅度不同，用户的注意度就不同"></a>流畅度不同，用户的注意度就不同</h3><ul><li>Uber为什么取消“一键叫车”？</li></ul><p>Uber早期宣扬的功能是“一键叫车”，体验非常流畅。结果在高峰时段价格飙升，很多用户下车扣款时，才注意到价格上涨。Uber也因此被很多人指责是“骗子”公司，收黑心钱。<br>为了应对这种情况，Uber把高峰时段叫车改成了“两键”，点击叫车以后，还需要确认加价。但效果并不明显。后来，Uber只好引入额外的信息确认屏，加价的数字也变得非常醒目，甚至还让用户手动输入一遍加价的倍数，这样才化解了危机。</p><p>可见，好的产品要有意保持一定的不流畅度，才能挑起用户的注意度。</p><h3 id="激励不同，用户的行为就不同（里程碑效应）"><a href="#激励不同，用户的行为就不同（里程碑效应）" class="headerlink" title="激励不同，用户的行为就不同（里程碑效应）"></a>激励不同，用户的行为就不同（里程碑效应）</h3><ul><li>Uber如何让司机甘愿加班？</li></ul><p>用户关闭一款正在使用的App时，通常会弹出一个对话框：“您确定下线吗？”Uber为了激励司机加班，换了个问法：“还差6美元就赚够40美元了！你确定下线吗？”就是这样一个小举动，大幅提升了司机的总体运营时间。</p><p>这其实是心理学上的“里程碑效应”：</p><blockquote><p>人们习惯被目标驱动，迫切地希望完成目标，直到达成里程碑节点。</p></blockquote><p>基于这个原理，Uber又推出了满单奖励系统：“再完成5单，就额外奖励100美元。”这个奖励刚拿到手，下个奖励就继续出现。很多司机为了赚够奖励，都会选择自愿加班。</p><h3 id="设计不同，用户的情绪就不同"><a href="#设计不同，用户的情绪就不同" class="headerlink" title="设计不同，用户的情绪就不同"></a>设计不同，用户的情绪就不同</h3><ul><li>《英雄联盟》怎样让玩家不骂人？  </li></ul><p>封号没有用，被封号的玩家可以再注册一个新号进入游戏。用户在游戏里大规模吵架的根本原因是，<strong>不开心的玩家聚在一起，小愤怒相互刺激叠加，形成巨大的愤怒</strong>。为此，产品设计师加入了一项“情绪指标”，用户在匹配队友和对手时，可以参考这项指标，<strong>避免在一场游戏里出现多位潜在情绪不佳的人</strong>，从根源上遏制了骂人情况的产生。</p><p>此外，在游戏加载页面，《英雄联盟》还会用文字提示：“队友犯错的时候骂他，将会表现更差。”有意思的是，当提示字体是红色时，辱骂行为显著下降；当字体是白色时，这些效果却消失了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何设计一款好用的产品？&lt;/p&gt;
&lt;p&gt;答案是，不仅要提供一个解决方案，还得让用户舒服地、主动地、渴望地接受。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="心理学" scheme="http://yoursite.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>关于社区产品（三）：优质社区的要素：社区氛围建设</title>
    <link href="http://yoursite.com/2019/10/15/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BC%98%E8%B4%A8%E7%A4%BE%E5%8C%BA%E7%9A%84%E8%A6%81%E7%B4%A0%EF%BC%9A%E7%A4%BE%E5%8C%BA%E6%B0%9B%E5%9B%B4%E5%BB%BA%E8%AE%BE/"/>
    <id>http://yoursite.com/2019/10/15/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BC%98%E8%B4%A8%E7%A4%BE%E5%8C%BA%E7%9A%84%E8%A6%81%E7%B4%A0%EF%BC%9A%E7%A4%BE%E5%8C%BA%E6%B0%9B%E5%9B%B4%E5%BB%BA%E8%AE%BE/</id>
    <published>2019-10-15T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.642Z</updated>
    
    <content type="html"><![CDATA[<p>做好一个社区的核心要素是建立用户的归属感，归属感会带来用户忠诚度和粘性，也是一个优秀社区的核心竞争力。</p><a id="more"></a><h3 id="什么是社区氛围？"><a href="#什么是社区氛围？" class="headerlink" title="什么是社区氛围？"></a>什么是社区氛围？</h3><p>社区的氛围具体可以拆解为：</p><ul><li>有群体性之的互动行为  </li><li>有规模有组织的社群行为  </li><li>有群体性共同认同的文化  </li><li>有明显的群体共性</li></ul><p>在理解里「社区氛围」这个概念后，思考下目前较火的视频社区氛围可以体现在哪里？</p><ol><li>抖音：评论区、互动类视频 </li><li>b站：弹幕</li></ol><h3 id="评论区互动行为的形成和积累"><a href="#评论区互动行为的形成和积累" class="headerlink" title="评论区互动行为的形成和积累"></a>评论区互动行为的形成和积累</h3><p>为什么用户愿意评论、互动？</p><blockquote><p>其实互动本质源于交流的渴望和欲望。</p></blockquote><p>用户有互动意愿的具体的心理表现可以拆分如下：</p><ul><li>内容核心要素引起的表达交流欲望：共鸣、好奇、矛盾、争议、情绪感染、趣味性；</li><li>渴求受到更多人关注的表现欲望：更多曝光、炫耀、抖机灵；</li><li>被认同的荣誉感：被点赞、被感谢、被认可、被追随、被模仿、成为意见领袖；</li><li>得到他人反馈的进一步交流互动动机：有人找你，有人对你的内容或语言做了反馈，被动或被激励做出反应；</li><li>跟随心理：跟随从众心理，模仿跟随，认同，最终形成规模化的集群化的互动；</li></ul><p><img src="http://qn.niaogebiji.com/11436960665b21caa945d743.93322475.png" alt="image"></p><p>氛围和精神激励的区别在于，“精神激励”是由平台主导、基于规则的用户驱动手段，而“氛围”是在平台生态和机制影响下，用户自驱的方向。</p><p>但这种纯粹一时心理情绪波动产生的互动欲望和动机，在没有利益驱动的情况下是脆弱的，需要被保护在一个相对温室的环境里才能维持。</p><p>一旦有不合群的人，或者不合适、不相关的内容出现，好不容易被内容激励的交流互动欲望就会被破坏了。</p><p>比如：</p><ul><li>黄色、广告、赌博、营销等内容；</li><li>风马牛不相及的东西充斥评论区；</li><li>否定的、消极的、被动的言论信息；</li></ul><p>以上种种不和谐的声音，很容易冲散互动和社区氛围，破坏整体环境。</p><h3 id="首要任务：治理不和谐的声音，塑造良好土壤"><a href="#首要任务：治理不和谐的声音，塑造良好土壤" class="headerlink" title="首要任务：治理不和谐的声音，塑造良好土壤"></a>首要任务：治理不和谐的声音，塑造良好土壤</h3><p>为了为社区塑造一个良好的土壤，抖音很可能做了这些事：</p><p><strong>1）评论区安全打击系统</strong></p><p>①机器过滤：安全打击模型+敏感词库。  </p><p>②发布限制：无法发布的限制策略。  </p><p>③疑似问题高亮标记：机器无法做到百分百准确，也不可能全部依赖人工，一方面成本太高，另一方面容易导致评论发布流程不畅，等待过审时间太长。对机器过滤进行分层，完全没有问题的直接先发出去，问题较严重的先过滤。  </p><p>④建立用户安全信用评级系统：对于用户账号进行信用评级监管，信用高的放行，信用低的人工审核，信用极差的封号。</p><p><strong>2）评论区安全审核机制</strong></p><p>这个机制和上面的安全打击系统结合，可以是：</p><p>①先发后审</p><p>②先审后发</p><p>③重要热度账号优先处理机制</p><p>④重要热度内容优先处理机制</p><p><strong>3）如何平衡安全打击力度和用户评论积极性之间的关系</strong></p><p>评论如果处理过严，或因为需要人工处理会导致较慢，也会打击继续互动下去的积极性，因此如何平衡二者之间也非常重要。</p><p>① 需要审核但未过审内容，用户自己可见，其他用户不可见：在评论区、作者自己的评论列表里面，用户可以看见是正常展示，实际上其他用户看不到，等完成过审后再公开。或者可以提示言论不当。</p><p>② 用户分层管理：置信度高的用户直接通过，置信度低的用户必须审核。</p><p>③ 人力不够怎么办？可以利用好用户负反馈和举报功能入口，同时发展范围更广的众测工具或平台，让社会力量加入到社区环境建设中来。</p><p><img src="https://pic.36krcnd.com/201806/20054924/d4ejnjj3wd2t8pkc!1200" alt="image"></p><p><strong>4）如何处理安全但是无意义或不相关的评论？</strong></p><p>有些评论其实是安全的，但是真的没什么意义，而且风马牛不相及，这类怎么处理，就看各个平台实际情况了。例如知乎会对不相关或无意义的评论进行折叠。</p><p>这里的内容判断也比较复杂，这个层面就回归到了如何引导评论和社区氛围，可能需要运营介入来干预或引导。</p><p>一个有效的策略是，针对头部热点内容，做评论区的精细化排查和运营引导，打造头部效应，对无意义内容进行下沉处理。</p><p>也有一些产品依靠举报和删除机制进行社区治理。如豆瓣 APP 的举报可以<strong>提交给作者和小组管理者，让他们审批删除，发挥了作者和小组管理者的监督维护作用</strong>。</p><p>知乎 APP 对不恰当的提问可以由其他用户提交编辑，不恰当的回答可以“踩”和“不赞同”，举报的内容可以提交到众裁议事厅，让众裁官用户来投票决定是否违规。</p><img src="https://ftp.bmp.ovh/imgs/2019/11/35ceb1ba0785424f.jpg" width = "340" height = "600" align = center><h3 id="如何通过产品机制或运营放大互动效应"><a href="#如何通过产品机制或运营放大互动效应" class="headerlink" title="如何通过产品机制或运营放大互动效应"></a>如何通过产品机制或运营放大互动效应</h3><p>光有一个好的环境是不够的，毕竟没有游鱼的池塘只是一潭死水。接下来最为关键的是到底怎么把互动行为不断放大，并形成社区氛围。</p><p>再回顾一下上文说到的拆解分析——用户产生评论等互动意愿的本质源于交流的渴望和欲望。</p><h3 id="【产品层面】："><a href="#【产品层面】：" class="headerlink" title="【产品层面】："></a>【产品层面】：</h3><p>①<strong>评论功能的强化引导</strong>，引导和提醒用户——解决互动模型的第一步问题，要有初始的内容激发争议或认同。</p><p>评论功能的放置位置、视觉UI设计的强化、评论数字的提示等都可以做一些心理引导暗示。</p><p>②<strong>评论点赞，评论置顶，评论加精，好友评论等</strong>功能——解决第二、三问题</p><p>获得更多点赞就能有更多曝光，被点赞=被认同，置顶加精等都是一种正向的荣誉激励。</p><p>还可以做评论反馈，设置一些机制或数据阈值，利用机器人和评论者做简单的点赞或回复互动。</p><p>抖音在这方面充分利用里评论的点赞功能，高赞评论排序，无论是评论者还是看评论者还是点赞者都在其中有很深入的参与。</p><p><img src="http://qn.niaogebiji.com/8067654555b21cb232b57c8.34589999.jpg" alt="image"></p><h3 id="【运营层面】："><a href="#【运营层面】：" class="headerlink" title="【运营层面】："></a>【运营层面】：</h3><p>在早期，运营要对评论内容进行强管理强干预，引导评论内容的方向，维护评论区的持续活跃，调动氛围。</p><p>①冷启动：运营准备好评论素材，影子用户，影子账号；</p><p>②种子用户：维护和拓展一批社区老玩家、版主等具有社区煽动性号召力有经验有意愿的用户，给予权益和利益（钱），来带动社区和评论；</p><p>③评论玩法：观察评论内容，观察用户评论习惯，找到新鲜的评论点，通过运营手段复制、扩散、模板化，再自己设计不同的评论套路玩法</p><p>④评论干预和引导：前期重运营，对热门优质内容的评论区做实时的舆论引导和内容引导</p><p>后期主要通过评论的规则和弱的干预即可，让用户形成自生态，自己进化发展，密切关注用户的行为，顺应和引导大的方向。</p><p>⑤ 外包客服的初始互动：有评论行为的用户需要不断的互动、反馈和激励</p><p>⑥用户激励设置：当然还可以对活跃的优质评论用户设置额外的荣誉激励，和金钱激励等等。例如勋章制度、高亮标识、等级身份等等。</p><h3 id="社区氛围形成的其他激素"><a href="#社区氛围形成的其他激素" class="headerlink" title="社区氛围形成的其他激素"></a>社区氛围形成的其他激素</h3><p>如果只是评论区的活跃度较高，还不能称之为社区。那社区和社群有什么不同呢？社区就是有一群人以内容形式做互动交流，社群是有相同点且互相认同的人群有组织的活动。</p><p>所以通过各种产品和运营杠杆，能把评论板块或其他社区板块做活，但想要形成抖音、B站这样的社群围墙还缺了一些环节。</p><h3 id="社区文化认同"><a href="#社区文化认同" class="headerlink" title="社区文化认同"></a>社区文化认同</h3><p>文化认同是指用户对社区内独有的语言风格、行为的推崇和喜爱。  </p><p>作为B站多年的忠实用户，B站对我最大的吸引力在于其轻松开放的文化氛围。再进一步讲，脑洞大开的评测文化也是B站整体氛围的一个缩影，实际上，整个B站的氛围，在中文互联网领域是独一份的。这是一种结合了轻松和积极，但又有底线的氛围，足够开放，在B站万物皆可调侃，造梗能力极强，一言不合鬼畜区见，放佛用户只要一到B站，就能放飞自我。</p><p>B站奇妙氛围背后的策略是，要想成为合格的用户本身是有门槛的，想自由发言起码先得通过100题的问答测试，这种<strong>隔离机制带来的就是发言用户的价值观是相对一致的</strong>；</p><p>B站的弹幕文化是社区氛围建设的第二层防御壁垒，也是B站能够在这个视频社区血战的年代依然保持高增长和高用户粘性的法宝。价值观相似（被灵魂100题过滤过）的用户们，在轻松的社区氛围中发弹幕互相飙段子和梗，这种<strong>基于有趣视频内容的二次文化创作，带来的是更加有趣的体验。而且这对于用户的积极性和粘性是有助推作用的</strong>，因为人人都可以发弹幕，围绕在同一个视频里飙弹幕的样子像极了微信群的斗图，但不一样的是，这一切都被记录下来，并且后来者还能随时参与。弹幕让视频创作者和观看者之间产生了奇妙的联系。</p><p>这些在弹幕或评论区能反复看见的梗，最终成为社区文化的一部分。当用户在网络上或是在日常生活中碰到有人懂相同的梗时，会加深自己作为该社区一员的身份认同，以及对社区的归属感。</p><hr><p>本文部分内容参考「鸟哥笔记」：<a href="http://www.niaogebiji.com/article-17695-1.html" target="_blank" rel="noopener">http://www.niaogebiji.com/article-17695-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做好一个社区的核心要素是建立用户的归属感，归属感会带来用户忠诚度和粘性，也是一个优秀社区的核心竞争力。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="社区" scheme="http://yoursite.com/tags/%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于社区产品（二）：如何做好内容生产和分发</title>
    <link href="http://yoursite.com/2019/10/13/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AUGC%E7%A4%BE%E5%8C%BA%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%86%85%E5%AE%B9%E7%94%9F%E4%BA%A7%E5%92%8C%E5%88%86%E5%8F%91/"/>
    <id>http://yoursite.com/2019/10/13/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AUGC%E7%A4%BE%E5%8C%BA%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%86%85%E5%AE%B9%E7%94%9F%E4%BA%A7%E5%92%8C%E5%88%86%E5%8F%91/</id>
    <published>2019-10-13T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.642Z</updated>
    
    <content type="html"><![CDATA[<p>一个合格的社区产品，其在“内容生产”和“内容消费”上必然会形成一个稳定的闭环，原则和策略地有效应用就是为了让社区在内容运营上的良性循环更加稳定。</p><a id="more"></a><h2 id="社区的本质：用内容连接人"><a href="#社区的本质：用内容连接人" class="headerlink" title="社区的本质：用内容连接人"></a>社区的本质：用内容连接人</h2><p>社区的本质是什么？</p><p>如果说社交产品做的是完成人与人的链接。媒体做的是完成人与内容的链接，社区则是用内容连接人。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/ef611f91e93d94be.png" alt="社交、媒体、社区"></p><p>前篇内容也提到了社区的基本构成，我们可以将社区看作一个三方市场：这里的人可以是内容生产者、内容消费者，人与人之间就是内容平台。<br>他们之间相互产生<strong>网络效应</strong>：  </p><p><strong>网络效应指产品的价值随着用户数量的增加而增加，简单来说就是，「用的人越多，产品越好用」</strong></p><p>这种效应对平台型业务尤其明显，而且用户规模一旦突破了某个临界点，平台就能进入自行运转和维持的阶段，甚至开始呈现用户自增长态势。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/7e1844d335becd01.png" alt="社区网络效应"></p><p>在社区内，生产者和消费者之间存在网络效应，生产者提供内容，消费者提供正/负反馈。  </p><p>生产者之间也存在网络效应，A的内容受到欢迎，B马上就可以开始学习借鉴A。所以社区里的一个套路可以短时间内从流行到审美疲劳；  </p><p>消费者之间也存在网络效应，通过点赞、评论，消费者表明自己的立场，和其他消费者之间产生认同感。</p><p>抖音的网络效应优势很明显，经过初期的市场投入和强运营辅助，社区自增长的飞轮已经旋转起来。<strong>更多的用户带来更大的观看互动量，形成好的氛围与回报激励，让内容生产者和MCN对内容有更高的情感投入和创作动力，最终又为用户带来更多好内容，持续加强平台粘性。</strong></p><p>这种多方面的网络效应让UGC社区在内容生产效率和内容分发方面的重要性不容忽视。</p><h2 id="优质内容是基础"><a href="#优质内容是基础" class="headerlink" title="优质内容是基础"></a>优质内容是基础</h2><p>一个社区是否能持续吸引用户，在于是否有足够多的“好的内容”让用户持续消费；在探讨如何保证优质内容的生产效率之前，首先思考一个问题：</p><p><strong>1. 什么是优质内容？</strong></p><blockquote><p>好内容的本质： 能够引起情感共鸣和情绪共振。</p></blockquote><p>不久前，我被一档音乐综艺节目《乐队的夏天》所吸引，开播三个月以来，它被认为带火了一整个低迷的独立音乐产业，也成为各大排行榜上第一位的热门节目。从《奇葩说》到《乐队的夏天》，米未总能做出很火的内容产品，让我不禁想追问什么样的内容能称为优质内容。</p><p>根据我进一步对于内容质量的探寻，将“好内容”的特点总结如下：</p><ul><li>好的内容最终都是通过触达人的情绪和情感去实现自己的产品价值</li><li>内容触达的人群越广，情感层次越多，程度越深，带来的价值就越大</li><li>优质内容可以吸引受众，在受众之间传播</li></ul><p>内容的创造，其实就是来自于创作者个人内心的感受。一个好的作品，标准大概只有一个：<strong>能在多大程度上、多大范围内、在何种时间维度上，触达更多的人心</strong>。 这里的作品可以是一档节目，一部电影，可以是社区内的一段文字，一张图片，或者是一段视频。</p><p><strong>2. 内容定位</strong></p><p>拿豆瓣这款产品来说，其定位是围绕在书、影、音周围的“社区”，帮助用户通过喜爱的东西找到志同道合者，然后通过他们找到生活中更多的好内容。</p><p>所以，在开始做社区产品前，需要思考的是：你的产品，解决的是人心的什么问题？或者说，在这个时间段里，你找到的想打动的这个群体，他们<strong>共同关心或者潜在的共同焦虑是什么</strong>。</p><p>在明确了社区要为用户解决的共同痛点或焦虑后，也就是内容的“基调”，就需要朝着这个方向推动社区的内容建设。</p><h3 id="一、内容生产"><a href="#一、内容生产" class="headerlink" title="一、内容生产"></a>一、内容生产</h3><p>这一部分要解决的问题是，UGC社区如何帮助/激励用户生产优质内容？如何引导用户持续产生有价值的互动/内容/分享？  </p><p>先从内容生产的成本说起，根据金老师在《UGC社区五大定律》中提到的，UGC社区的内容成本结构由三块组成：体力成本、技术成本、智力成本。这些成本也组成了用户在社区中贡献内容的门槛；那么作为社区产品经理，想要促使用户生产内容，应该尽量降低内容创作门槛。</p><h4 id="1-降低创作门槛"><a href="#1-降低创作门槛" class="headerlink" title="1. 降低创作门槛"></a>1. 降低创作门槛</h4><p>创作不是件易事。生成的内容是需要质量保证的，因此需要消耗大量的智力体力成本，所以无形中提高了ugc的门槛。我们看到Twitter的崛起，是在提升内容创造者的效率；微信公众号崛起后，朋友圈的动态被大量转发内容所取代。所以<strong>生成内容的效率，根本在于——快速表达</strong>。  </p><p>如何帮助用户快速表达？</p><h5 id="产品功能辅助"><a href="#产品功能辅助" class="headerlink" title="产品功能辅助"></a>产品功能辅助</h5><p>“微视”作为一款短视频社区产品，其“<strong>跟拍</strong>”功能值得一提，每个视频界面都可以点击“跟拍”进入视频录制，录制视频时可以直接使用原视频音乐，模仿原视频动作进行拍摄。</p><p>类似的还有VUE中的vlog模版、贴纸等各种视频创作工具，猫饼的多种出色的动画效果字幕，以及一闪质感优秀的滤镜功能等，各个社区产品都在使出浑身解数降低用户的创作门槛。  </p><img src="https://ftp.bmp.ovh/imgs/2019/11/dd5bfc6ce3863626.jpg" width = "320" alt = "VUE Vlog视频创作模版"><p>几年前有个红极一时的相机产品“足记”，他们给照片上下加了两个黑条和一句电影的台词，再配上非常好的画面调色，这让任何人都可以拍出犹如电影一般的画面，这个画面还有叙事性，能够表达更抽象的情感或者更复杂的故事情节。一瞬间让“拍照”这个简单的行为上升到了“拍电影”这个层级。尽管用户不是真的在拍电影，但是成品却无比接近这种创作体验与情绪反馈。创作门槛极低，也正是这个功能让产品迅速传播。</p><p>这些工具都成功的降低了用户的内容生产成本，从而开启了用户能够海量UGC内容的大门。</p><p>文字内容界也有一个值得关注的案例——hooked，这个app作为小说社区的一个重要的优势就是内容创作，任何人都可以来这里创作「对话故事」，不需要像现实中写小说那样每天码字，<strong>用零碎的时间就可以完成对话故事的创作</strong>，所以内容成几何形式的增长。</p><h5 id="内容创作指导"><a href="#内容创作指导" class="headerlink" title="内容创作指导"></a>内容创作指导</h5><p>近来很火的vlog，作为一种内容表达形式，对创作者的叙事能力、剪辑功底都有着较高的要求，往往几分钟的Vlog，背后付出的却是几小时、甚至十几个小时的汗水。对于这种高门槛的内容，平台给予非专业用户创作指导是很有必要的。</p><p>B站官方非常重视创作指导，带领四名知名UP主，历时一个月时间，制作了4门课程，开设4场直播，不光是要学习课程，还要完成作业，UP主直播还会点评学员的作业，这样的指导堪称保姆级别，优质的稿件还可以拿到现金奖学金和作品展示机会。</p><p>一个月的活动，有12737位UP主参与投稿，产生了17223个Vlog，通过这样的活动选拔了一批有潜力的Vlogger。</p><p><img src="http://qn.niaogebiji.com/7202659135d54c4fe730f58.32973456.jpeg" alt="b站vlog创作指导：课程+直播+作业+点评"></p><h5 id="专题策划"><a href="#专题策划" class="headerlink" title="专题策划"></a>专题策划</h5><p>在专题策划方面，抖音和微博走的是常规路线，抖音重点策划的旅行、美食、时尚、日常4大方向。而微博则是鼓励用户参与Vlog挑战赛，希望从中能够诞生Vlog的佼佼者。</p><p>B站上的UP主“毒角show”拥有227万的粉丝，制作的Vlog颇受粉丝喜欢，但是身在美国，邀请老美一起参加挑战，独特的背景让他的生活内容更加具有“可看性”。那么对于素人Vlogger来说，平淡的生活对于用户有吸引力吗？</p><p>为此B站大刀阔斧地尝试专题策划，一种是紧贴热点做专题策划，另一种则是结合平台特色做专题策划。</p><p>① 紧贴热点做专题策划</p><p>例如“Vlog遇上草莓音乐节”、“Vlog夏日大挑战”、“七夕Vlog”，同时提供相应的创作主题参考，让用户跟随着热点制作自己的Vlog。</p><p>② 结合平台特色做专题策划</p><p>Vlog叙事节奏松散，缺乏看点，对于观看者来说目的性较弱，所以无论是YouTube还是国内的Vlog，主题性质的Vlog都会更受欢迎。</p><p>B站结合平台的特色，打造了例如“聊聊我的职业”、“我的探店笔记”、“带你参观我的家”等主旨鲜明的专题，让大家能够从不一样的角度去分享自己的工作和生活。</p><p>同样受欢迎的主题Vlog还有UP主老番茄拍摄的“我去网易做游戏啦”，播放量破380万，弹幕高达12万，互动量是平常的4-5倍。</p><p>对于B站来说，专题策划不仅是给予了创作者内容方向，也让观看者有话可说，有弹幕可发，通过弹幕互动，让Vlogger收获正向反馈，从而创作出更多的优质内容。</p><h4 id="2-内容生产激励"><a href="#2-内容生产激励" class="headerlink" title="2. 内容生产激励"></a>2. 内容生产激励</h4><p>一个内容平台如果只提供优质的内容生产工具，对内容生产者的权益不加以维护，很难维持一个有秩序并且自增长的良好内容生态。</p><p>激励用户就要从用户心理的角度出发，思考：人在什么时刻容易受到激励？</p><blockquote><p>八大驱动力原则：<br>使命感、创造&amp;反馈、社交影响&amp;联系、未知&amp;好奇心、恐惧&amp;害怕、稀缺性&amp;无耐性、拥有感&amp;占有感、发展&amp;成就。——《游戏化实战》</p></blockquote><p>从用户的这些心理出发，常见的ugc激励可分为物质激励和精神激励。</p><h5 id="精神激励"><a href="#精神激励" class="headerlink" title="精神激励"></a>精神激励</h5><h6 id="【互动】"><a href="#【互动】" class="headerlink" title="【互动】"></a>【互动】</h6><p><strong>用户社交的根本目的是希望自己的行为得到反馈和认可，内容得到了他人的互动是最直观的情感反馈之一</strong>。</p><ul><li>赞、收藏、转发：此类单向正反馈会使得内容生产者收获情感的满足，进而为了获得更多的反馈而生产更多更优质的内容，同时，平台也会给予单向正反馈多的内容更多的曝光量；</li><li>评论：由于可指定回复人，导致相当多的回复成为了双向互动，相比单向互动，回复表达的信息更丰富，可以为用户画像和该讨论的质量提供更多的标签特征；</li><li>关注：关注是为了持续获取被关注对象所产生的内容，这是对被关注对象的一种高度肯定。能让用户获得巨大的成就感，用户为了获得更大的成就感就希望拥有更多的粉丝，从而促使用户生产更多的优质内容。</li></ul><p>产品能够在提高互动量方面做什么？</p><p>1、<strong>优化交互，提供操作便利的互动行为</strong>：将点赞、关注、评论、赞赏等功能落在明显位置，减少用户的操作步骤。采取按钮吸底或侧边悬浮等固定展示形式（如虾米评论区），起到一定的暗示引导作用；</p><p>2、<strong>突出互动效果，增加创意设计</strong>：如即刻在信息流露出部分评论人昵称和评论内容，并打上了“热评”标签，激励浏览者参与评论互动；视频网站的弹幕「+1」，以及快手的“双击666”都是互动形式的创意演化，值得借鉴；VUE在视频下方提供快捷emoji评论按钮功能也是对用户激励的一种有效尝试。</p><img src="https://ftp.bmp.ovh/imgs/2019/11/e93102f3753b2616.jpg" alt = "VUE在视频下方提供快捷emoji评论功能"><h6 id="【特权】"><a href="#【特权】" class="headerlink" title="【特权】"></a>【特权】</h6><p>特权激励一般是指依照公开的标准，区分出特殊用户，提供更优质的服务，内容操作权限等，具体环节为：</p><ul><li>区分不同用户享有的特权：首先把产品可以提供的服务做分层，把基础的、可满足绝大部分用户需求的服务，免费提供；把需要消耗核心资源的、非基础的增值服务，有条件的提供给用户。这个条件，可以是付费，也可以是要求用户贡献</li><li>展示特权信息：公示获得特权所需的条件，在产品的重要位置和操作流程里做推广，强化用户对特权的认知，真正的打造出特殊性、稀缺性和尊贵感</li><li>特权激励主要包括：等级、会员、特殊操作权限等</li></ul><p><img src="https://pic.36krcnd.com/201807/31015633/vy1u6ld0su6ho6ok!1200" alt="小红书形象化等级呈现、特权激励"></p><p>「豆瓣」在特权激励方面做的十分克制，由于其社区调性，文艺清新相比其他属性更能彰显自己的个性和品味，许多用户对文学艺书内容本来就有比较大的参与欲望，避免出现德西效应（westerners effect），豆瓣社区没有等级体系和会员体系，而是引入了「小组」，使用了赋予“组长”和“管理员”管理特权的激励方式。</p><ul><li>人员管理权限：组长和管理员可以审核新成员加入/移除已存在的成员，人员管理权限是一种与普通用户非常不平等的特权，这种特权激励极大程度的增强了管理员的主人翁意识，多数小组中，组长和管理员大都设置了小组的入组条件，发言规则等，以及花精力去宣传小组扩充规模等，再从小组人数的增多、小组排名的升高来收获成就感。</li><li>内容管理权限：组长和管理员可以移除自己认为不符合小组规范的内容，通过剔除不良信息来营造更好的小组氛围，使得组内的讨论增多，内容质量更高，吸引更多人加入，小组排名上升，组长和管理员收获成就感。</li></ul><p>这种始于论坛时期的激励手段的<strong>好处是人人可得可量化，可以解决用户基础活跃度和内容生产数量问题</strong>，对于维持用户基础活跃比较管用。但在目前很多平台不缺内容，只缺优质内容的情况下，此类精神激励就相对局限。</p><h6 id="【展现】"><a href="#【展现】" class="headerlink" title="【展现】"></a>【展现】</h6><p>当社区已经有基础的生态氛围，用户圈层相对稳定，可考虑具有稀有性时效性的激励手段。比如即刻会选取圈子（之前叫话题）下的优秀内容生产者授予“每周达人”标识（如“本周投资观察家”），马蜂窝每天会选取优质游记置顶在首页称为“蜂首游记”。知乎、简书会把优秀的文章推荐到热门，以及自己的SNS渠道，给作者提供更大的曝光。这其实是精神和物质双重激励的手段，因为既满足了用户的荣誉感，也帮用户获得更多的关注。由于虚荣心的存在，这是一个非常有效的激励方式。</p><h5 id="物质激励：补贴、打赏"><a href="#物质激励：补贴、打赏" class="headerlink" title="物质激励：补贴、打赏"></a>物质激励：补贴、打赏</h5><p>除了官方砸钱之外，还可以利用打赏机制，让读者为创作者付费。例如微信公众号的赞赏、视频直播产品的刷礼物功能等。这种物质激励手段给予创作者的是实实在在的奖励。</p><p>今年夏天，B站推出了“Vlog星计划”，在激励创作方面，除了常见的流量扶持、商业资源外，还做出了真金白银的举措，每月设立100万 的专项Vlog奖金，同时优质的Vlogger还可以和平台联合出品系列精品内容。</p><p><img src="https://pic.36krcnd.com/201908/15014427/lbt8hr62mxzbs0ne!1200" alt="B站的内容生产激励"></p><p>以上种种激励手段，总结起来就是：<strong>让内容产出者得到利益或满足其某种心理需求，才能支撑他们持续产出更多更好的内容。</strong></p><hr><h3 id="二、内容分发"><a href="#二、内容分发" class="headerlink" title="二、内容分发"></a>二、内容分发</h3><h4 id="内容分发的目标"><a href="#内容分发的目标" class="headerlink" title="内容分发的目标"></a>内容分发的目标</h4><p>内容分发的本质是为了让用户更高效率的获取想看的内容，也就是内容的匹配度。这里的高效率可以拆解为两点：</p><ul><li>迅速看到想看的内容：用户打开App后找到想看的内容的时间或路径越短越好</li><li>看到的内容是喜欢的：用户看到的内容中，喜欢的内容占比越大越好（信噪比越大越好）</li></ul><h4 id="内容控制与价值判断"><a href="#内容控制与价值判断" class="headerlink" title="内容控制与价值判断"></a>内容控制与价值判断</h4><p>在内容产生的源头就开始有意识的将内容划分到相应的组织结构中，这样可以保证新产生的内容都是在平台的可控范围内的。一般有三种方式：</p><ul><li><strong>内容生产者分类</strong>：例如微博会将大V划分如不同的领域，通过微博的认证可以看到有萌宠类博主，娱乐明星类博主等等。这些已经被分类的大V产生的微博将会直接进入到相应的内容领域中去。</li><li><strong>人为划分</strong>：也即在内容发布至平台时，要求生产者必须将内容按照平台组织进行分类。例如B站在投稿时，必须填写的领域分类和标签。</li><li><strong>机器识别</strong>：也会有内容无法通过上述两种方式进行归类。这个时候可以借由技术手段，对内容进行分析判别后再分类。例如微博的领域类别下，会出现非该领域下的大V博主内容，可能是通过机器识别重新归类过。</li></ul><p>而如何判断一个内容值得分发，主要有两个因素考量，一是实时性，二是内容热度。</p><p>对于微博这类的资讯爆炸的平台，对内容实时性的考量是最大的。可以看到每分钟更新的热搜，推送给用户的内容也几乎都是一周之内产生的。</p><p>而对于B站知乎，本身已经沉淀了很多优质内容，且这些内容是没有时效性的，可以反复被消费，这时候内容热度就能很好地反映这类内容的价值。通过用户对内容的认同行为（点赞，赞同，转发，感谢等等），确定内容价值，再进而确定是否更大范围推送。最有名的案例就是抖音的流量池算法推送机制。</p><h4 id="常见分发策略及优劣"><a href="#常见分发策略及优劣" class="headerlink" title="常见分发策略及优劣"></a>常见分发策略及优劣</h4><ul><li>编辑分发：由运营人员根据对业务的了解，对优质内容进行排序，推送给用户</li><li>社交分发：根据关注等社交关系，推送给用户相关的各类动态（关注的人的日记、评论等）</li><li>算法分发：包括排行榜、搜索筛选、个性化推荐等</li></ul><p>对于有一定用户和内容基础的社区产品，分发效率通常是算法分发&gt;社交分发&gt;编辑分发，但也要根据实际业务的属性具体问题具体判断。</p><p>以豆瓣为例，其分发策略主要有以下5种：</p><ul><li>编辑推荐：用在精选推荐等对内容质量要求极高的模块（如「豆瓣」最有竞争力的电影分类——“精选片单”），通过运营引领产品调性和社区氛围</li><li>排行榜：主要通过对所有内容进行关注度排序和时间先后顺序排序，一方面提升社区部分媒体属性和品牌竞争力，另一方面为在线售票平台、书城等导流；适用在具有一定媒体属性的分类中，在社交属性较强的“关注”和“小组”内讨论没有使用这种分发策略</li><li>搜索筛选：对于部分书影音爱好者，有时对自己的当时的喜好有非常明确的感知，「豆瓣」也提供了筛选搜索的分发方式，一般情况是默认按照时间先后顺序排序</li><li>社交分发：「豆瓣」单纯使用社交分发策略的只有首页的“关注“，这里不展示其他的推荐内容，只有关注人的动态、日记等，主要目的是强化社交关系</li><li>社交分发+个性化推荐：「豆瓣」最常用的内容分发策略，存在于各个分类中，既使用了常见的内容匹配根据用户画像推送匹配的内容，也使用了基于用户的协同过滤比如“你可能想关注的人、你可能感兴趣的小组“</li></ul><table border="1"><tr>  <th>常用分发策略</th>  <th>适用场景</th>  <th>优点</th>  <th>缺点</th></tr><tr>  <td>编辑推荐</td>  <td>对内容质量要求极高</td>  <td>提升社区调性，氛围建设</td>  <td>人力成本高、分发效率低</td></tr><tr>  <td>排行榜</td>  <td>具有一定媒体属性</td>  <td>提升社区知名度</td>  <td>不易沉淀社交关系</td></tr><tr>  <td>搜索筛选</td>  <td>服务细分领域内容爱好者</td>  <td>用户可精准找到内容</td>  <td>操作路径长、分发效率低</td></tr><tr>  <td>用户关系分发</td>  <td>有关注/交友等行为</td>  <td>利于沉淀社交关系</td>  <td>内容总量受限、信噪比低</td></tr><tr>  <td>用户关系+个性推荐</td>  <td>内容和用户连接有自发增长趋势</td>  <td>分发效率高</td>  <td>易过于中心化，不利于社交关系沉淀</td></tr></table><p>豆瓣现有的内容分发策略以社交分发和个性化推荐为主，但对于不同的内容分类，采用了多不同的分发策略，由此看来，除了分发效率，内容分发也要考虑社区氛围建设、品牌调性提升，为深度用户进阶功能增加其留存，社交关系沉淀等，并不是所有的内容使用个性化推荐就是最合适的。</p><p>保证UGC社区的内容生产效率，合理运用内容分发策略，是打造UGC社区的关键步骤。  </p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>优质内容是社区的核心，吸引有创作能力的人不断加入，是社区最大的价值和护城河。持续的、高质量的内容产生，能够带来更大的观看互动量，形成好的氛围与回报激励，进而让创作者对内容有更高的情感投入和创作动力，最终又为用户带来更多好内容，持续加强平台粘性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个合格的社区产品，其在“内容生产”和“内容消费”上必然会形成一个稳定的闭环，原则和策略地有效应用就是为了让社区在内容运营上的良性循环更加稳定。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="社区" scheme="http://yoursite.com/tags/%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于社区产品（一）：理解社区及社区的流动</title>
    <link href="http://yoursite.com/2019/10/09/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%90%86%E8%A7%A3%E7%A4%BE%E5%8C%BA%E5%8F%8A%E7%A4%BE%E5%8C%BA%E7%9A%84%E6%B5%81%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/10/09/%E5%85%B3%E4%BA%8E%E7%A4%BE%E5%8C%BA%E4%BA%A7%E5%93%81%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%90%86%E8%A7%A3%E7%A4%BE%E5%8C%BA%E5%8F%8A%E7%A4%BE%E5%8C%BA%E7%9A%84%E6%B5%81%E5%8A%A8/</id>
    <published>2019-10-09T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.641Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章将从产品基本构成认识社区，从城市的角度理解社区以及社区的流动。</p><a id="more"></a><h2 id="什么是社区？"><a href="#什么是社区？" class="headerlink" title="什么是社区？"></a>什么是社区？</h2><p>以某种介质为交流载体，可沉淀社交关系的产品形态，就是广义的互联网社区。</p><p>如今的社区产品往往是基于人的兴趣来搭建的一个内容平台，内容是社区的基础设施，吸引有创作能力的人不断加入。持续的、高质量的内容产生，是社区最大的价值和护城河。</p><p>一个互联网社区的终极形态，可以看作把线下的城市、国家搬到线上来，真正做成一个包容性和多样性极强，又具备社交元素的平台。从人的层面说，这个平台上有各行各业各个阶层的人，也有由个体组成的群体，并且群体之间保持着联系；从平台角度来说，它具备着比较完善的基础设施建设，也有着可以承载个体和群体的功能。</p><h2 id="从城市理解社区和社区的流动"><a href="#从城市理解社区和社区的流动" class="headerlink" title="从城市理解社区和社区的流动"></a>从城市理解社区和社区的流动</h2><p><img src="http://a.36krcnd.com/nil_class/9318ff55-2ff2-4831-9dd8-1fefab567200/B45.tmp.jpg!heading" alt="《美国大城市的死与生》——Jane Jacobs"><br>《美国大城市的死与生》——这是来自Jane Jacobs关于城市规划最出色的著作，从中可以窥得关于社区的一些思路。城市永远是动态的。无论多么伟大的君王，都无法完全按照自己的意志来规划一座城市。在线社区也是这样，只能让它自然生长出来。我们快速回顾一下城市的发展和在线社区的发展，会发现城市社区和在线社区之间有着惊人的相似。</p><p>虽然没有明确的界限，但在 2004 伊始，O’Reilly 公司副总裁多尔蒂（Dale Dougherty）在一次头脑风暴大会中提出了全新的 Web2.0 的观点。互联网居民不满足于居住在一个个被规划好的城墙中，他们渴望参与到社区建设中来。Web2.0 更注重用户的交互作用，用户既是网站内容的浏览者，也是网站内容的制造者。Flickr 的兴起让越来越多的人开始进入在线社区，而 DeviantArt 上则聚集了全球各种艺术家和设计师，<strong>每个人都在努力地建设着自己的主页，就像逃出了围墙束缚的居民一样</strong>，「我的主页」这个概念越来越多地出现在各个在线社区，进入了更多人的视野，人们开始像聚集在城市社区里一样聚集在虚拟社区中。</p><p>随着运输和通信的发达，信息的交流变得异常丰富。城市的规模越来越大，拥有多个副中心的城市模式开始兴起，城市的特点也开始逐渐鲜明起来。<strong>每座城市开始拥有自己的标签，而随之而来的是更多追寻这些标签特点的人们涌入。更多的交流和沟通让城市变得更具创造力</strong>。</p><p>在之前的 Web2.0 社区还在迷茫如何适应 mobile 的时候，垂直社区已经悄然兴起。<strong>究其本质，被连接的人群越来越多元，兴趣的种类也越来越分散，无论兴趣大小，人们总能随时随地聚在一起交流。</strong></p><p>回望在线社区这一路的进化，竟和城市社区演化的路径惊人地相似。虽然无法从专业的城市规划角度来给互联网社区以指导，但是其中的一些模式却是值得借鉴的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【关键词】：安全 沟通 引流 去中心化 ｜ 多样性 密度 资金</span><br></pre></td></tr></table></figure><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><blockquote><p>「一个成功的城市街区的基本原则是人们在街上身处陌生人之间，必须能感到人身安全，必须不会潜意识感受到陌生人的威胁。」——简·雅各布斯</p></blockquote><p>在一个城市中，人行道肩负着最重要的作用，估计许多人都会回答是交通。但雅各布斯却从另外的角度来解释街道的作用：安全。</p><p>在线社区里面spam（垃圾信息）就像治安不好的街道中的犯罪分子，试图欺骗来访的人们。作为社区管理者，当你发现spam开始大量涌入的时候，该怎么办呢？</p><p><img src="http://www.voicer.me/wp-content/uploads/2019/07/4_5-3.jpg" alt="image"></p><p>有这样两个社区产品，A街区非常单一，只有一条条的信息展示。你无法进行回复或评论，而发布者往往也只是一个没有头像的用户 ID，每个页面有非常多的人在浏览，但却无法在这个社区产品上得到体现。<strong>于是，在缺乏观察者的情况下，许多人开始蠢蠢欲动</strong>。比如试探性地在一些分类下发一些错误分类的内容，发一些标题和内容无关的内容，继而开始发一些欺骗性内容。虽然「警察」一再强调会有很严重的后果，但警察总有下班的时候，第二天过来整个社区已经变得乌烟瘴气了，这也是匿名社区到最后很难发展的原因之一。</p><p>B社区在建立的时候，刻意地强调用户的存在感，把之前冰冷的数字尽量展示为鲜活的用户形象，同时不断强调社区里面的动态变化，让所有人感到这里有很多人。于是<strong>在很多时候，spam 被举报的概率远远高于管理员的巡查，而当有人试图挑战社区边界的时候，内部的热心用户就会冲上去制止这种行为</strong>。</p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>人们在街头巷尾讨论着家长里短，楼下的阿姨们往往是街坊的新闻广播台，而<strong>这些沟通促进了人与人之间的交流，也促进了人们对这个街道的感情和归属感</strong>。</p><p>互联网社区中，沟通依然是一个不可缺少的部分。简单来讲，几乎所有早期网站都会有一个论坛，而论坛都有一个叫「灌水区」的地方，这里是为用户提供交流场所的地方。对于工具性网站来说，一个如 Google 搜索结果页面般精确且不可评论的列表或许是不错的设计，但对于社区类网站来讲，那应该是个巨大的灾难。比如早期的分类信息网站（如百姓网、58 同城）：没有用户的身份信息，没有任何可以进行多人沟通的地方，所有人都不在意自己的帐号，忘记了就重新注册一个。表面看来这些网站有大量用户，但实际上彼此缺乏沟通的用户对这些网站几乎没有归属感。</p><p>当信任感消失之后，用户的流失率会惊人地高，因为没有人愿意把这里当做属于自己的一块地方。这些网站一旦停止流量采购，用户回头率将会直线下跌。而知乎和豆瓣则是正面的例子，在那里你几乎可以评论任何条目或者回复别人的评论。这就像在路边修葺了许多公园，任何人都可以驻足品评讨论一番，人们相互间的关系则会变得更加融洽。毕竟，人们选择加入哪个UGC社区，都是被其中的人吸引，而并不是被社区本身吸引。</p><p><img src="http://www.voicer.me/wp-content/uploads/2019/06/1_12-1.jpg" alt="image"></p><h3 id="引流"><a href="#引流" class="headerlink" title="引流"></a>引流</h3><p>街道可以带来源源不断的人流，而街道的交汇处往往是最热闹、商业最发达的地方。在城市中很多时候，人们只是从某条街路过，顺便买一杯饮料，而如果交叉的路口被封死，许多消费可能就不会产生。咖啡馆获得流量的成本变高，继而会提升价格，一旦价格超过了某个临界值，几乎所有人都会放弃购买，而这条街道的衰败也就不远了。</p><p>在互联网上，虽然页面与页面之间不存在物理距离，只要通过一个超链接即可连接，但在<strong>产品设计上依旧应该注意路径的设计</strong>。对于过深的路径，用户很难探究到底。比如说为了查看一部电影的评论，有多少人是按照首页—电影分类—年代—字母的顺序来查找的呢？<strong>缺乏相关性的推荐，就好比没有岔路口的街道，会让用户错过很多可能对他有用的内容，也会降低网站内容展示的频率</strong>。一个典型的例子就是 2012 年，亚马逊将推荐系统深入集成到支付流程的各个环节，从而让第二季度同期销售额增加了 29%。当然，这并不是说一旦有了岔路口，开任何商店都可以高枕无忧，<strong>更重要的是分析这个路口人群的喜好。如果没有满足用户的需求，拥有再大的流量也无济于事</strong>。</p><p>从另一个方面来讲，虽然现在许多人都注意到垂直社区的风生水起，试图从垂直的人群入手建立社区，但需要思考的是，将你的社区放入整个互联网街区中，你这条街道是充满了岔路口还是指向唯一的目的地呢？当我们为美食图片分享社区调研用户时，得到的很多回复就是：「我为什么要去一个只能晒美食照片的地方呢？这边晒完美食还能聊点别的呢。」</p><h3 id="中心化"><a href="#中心化" class="headerlink" title="中心化"></a>中心化</h3><p>社区刚刚建立，没有太多的功能区域，也没有许多用户，这时候大家都可以通过一个中心化的入口进入各自想去的地方。比如之前很火的图片社交产品nice，<strong>在产品初期，用户还没太接受这种玩法的时候，需要有一个中心化的编辑精选时间轴，让用户最快速地找到这个社区的精华所在，掌握这个社区的玩法并了解其标准，然后才能更好地融入社区</strong>。</p><p>随着用户数量的增加，每个人来到社区的目的开始变得更加多样，功能的模块也在增多。一个中心化的主页往往只能满足一部分用户，剩下的用户则会因为找不到想要的内容而离开，<strong>导致整个社区的活跃度无法提升。这时候的首页就应该根据用户喜好来设置小街道</strong>，而不是坚持统一内容的主干道。</p><p>当然，这<strong>并不是说去中心化就一定是好的，要根据社区规模来衡量</strong>。毕竟如果人数太少内容不够，这时候就进行去中心化，很容易让用户感觉孤独而离开。</p><h3 id="多样性"><a href="#多样性" class="headerlink" title="多样性"></a>多样性</h3><blockquote><p>「城市是由无数个不同的部分组成的，各个部分也表现出无穷的多样化。大城市的多样化是自然天成的。」<br>——简·雅各布斯</p></blockquote><p><img src="http://www.voicer.me/wp-content/uploads/2019/03/f11_building.jpg" alt="image"></p><p>工具性网站可以让用户使用完就关闭，而社区的活力却往往在于「逛」。这并不是说在线社区就要包罗万象，而是说<strong>在有一个明确的定位之后，通过不同的功能和内容来吸引不同的用户在更多时间访问</strong>。</p><p>比如大众点评网除了查找精确的食物之外，还有母婴、结婚等频道，这样就能在一个产品框架下吸引更多的用户到访。而评论、榜单和用户自己创建的榜单，可以<strong>留住那些资深用户和没有明确目的的用户</strong>。</p><p>这里面很容易出现一个问题，当我们看到某些内容的数据非常高的时候，就不断地想去优化这个地方，把那些看似不活跃的部分砍掉，以期提高活跃度。但从长远来看，<strong>抹杀社区的多样性会带来灾难性的生态毁灭</strong>。设想如果在一个网游里，付费用户比例不断提升，而其他类型的玩家不断减少，短期来看收入是一定增加的，但是最终的结果不言自明。</p><h3 id="密度"><a href="#密度" class="headerlink" title="密度"></a>密度</h3><p>开过论坛的朋友都知道，过早地拆分板块往往会导致论坛灾难性的衰退。因为本来在一个板块里虽然话题可能有点多、有点重复，但能保证有足够的人流和活跃度，拆分之后虽然目的集中，却没有足够的人来互动。<strong>访问这个板块的人得不到足够的互动和支持，也会渐渐地离开</strong>。基于城市设置分站的网站，往往会遇到这个问题。因为一线城市的人口基数和互联网普及力度，往往会很快让公共区域混乱，而这时候过细的拆分却会阻止三四线城市的发展。</p><p><img src="http://www.voicer.me/wp-content/uploads/2019/03/10b_1000.jpg" alt="image"></p><p><strong>在信息量不够的时候合并板块，减少功能，让用户能优先完成最重要的事情，产生粘性，保证有足够的密度，才能让这些小地方慢慢发展</strong>。</p><p>比如大众点评网的日本爱知县首页，就没有分类，直接进入的就是信息列表。试想如果统一用现在的上海首页，用户点进去之后没有信息的几率会有多大？另外，保罗·格雷厄姆（Paul Graham）也曾经说「Do Things that Don’t Scale」。从某种意义上来说，也是希望创业者能先把一小群人服务得足够好，让他们的密度足够高，再去扩张，否则就会重蹈去年叮咚小区的覆辙——铺天盖地的广告但在单位区域的密度不够高，导致很多用户激活后发现周边没有信息而卸载，无法形成滚雪球一样的正向回馈。</p><h3 id="贫民窟"><a href="#贫民窟" class="headerlink" title="贫民窟"></a>贫民窟</h3><p>在看《美国大城市的死与生》之前，我能想到的解决方法往往是将贫民窟推平了重建。但这种做法只是转移而不能根治，这些被清理的人往往会在另外一个地方聚集。从另一个角度来看，正是因为大城市能给贫困的人带来更多的机会，所以会造成周边城市 / 农村的低收入人群涌入。<strong>从某种意义上来说，贫民窟的扩张代表一个城市有足够的吸引力</strong>。解决贫民窟问题最大的力量不是政府和商业力量，也不是其中变得富有的居民，而是住在那里的普通收入的居民。就好像我上大学离开家之后，虽然经济能力和见识得到了提升，但是却没有为家属院做任何的贡献。反而是一些大爷大妈，在不停地上访后，让坑坑洼洼的小路变得平整，家属院里普通收入的工人集资盖了新的房子，它就是在这群人的不断努力下，没有继续衰败下去，或许还会变得更好。</p><p><img src="http://www.voicer.me/wp-content/uploads/2019/03/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190301184546-1044x587.jpg" alt="img"></p><p>当你的社区开始小有名气的时候，一些小的意见领袖（KOL）开始从别的社区迁移过来。这时候你可能会慢慢地忽视你的社区原住民，将运营重心投入到意见领袖身上。诚然，其中一部分可能会转化成你的核心用户，但<strong>他们是最不固定的一个人群</strong>。一旦有新的地方来邀请，并且能给予更好的奖励和名誉，他们就会头也不回地离开你的社区，而那些曾经忠实于你的用户，早已因为疏于维护而慢慢流失。</p><p>事实上，<strong>如果你不能做到微信或微博这样平台级的规模，那些意见领袖离开你的社区是必然的</strong>。就像贫民窟里的人一旦有钱了大部分会选择搬走一样，他们永远在追求更大的影响力和更多的经济回报。这时候不应该自怨自艾地去追离开的人，而应该更多地把目光集中在中级用户，<strong>从社区内部开始，培养属于你们社区的意见领袖，鼓励并帮助他们一起完成社区的改造</strong>。</p><p>另外，对于疯狂涌入的初级用户也要报以感恩，因为他们是得知你的社区优秀而来的。应该<strong>耐心疏导并设计合理的流程，让他们迅速成长为社区的忠实用户，而不是将他们视为拉低社区品质的蝗虫，任他们自生自灭或者干脆驱逐殆尽</strong>。</p><h3 id="资金"><a href="#资金" class="headerlink" title="资金"></a>资金</h3><p>我们往往能在城市的郊区看到大片新区拔地而起，政府对这些地方的投资往往是一次性注入大量的资金。但是城市的发展除了这种大量资金的一次性注入，还需要很多渐次性资金的注入，比如一些老小区的改造，一些保证街区多样性的基金等，很难毕其功于一役。城区发展如果缺乏后续的资金投入，遇到现实情况与规划不符，就会丧失改进的能力，继而让城区进入恶性的循环。</p><p>历来中国分类信息网站的广告大战，烧钱程度令人咋舌，数据的上升也如同坐火箭一般，但可惜的是，其中B家在一轮轰炸过后，没有后续的投入，缺乏后继的推广维护，加上产品迭代的效率问题，它只是在人们心目中竖起了一些大楼，却<strong>没有进一步研究和挖掘当地人的需求和习惯，导致占有率迅速下降</strong>。</p><p>当你的社区拥有资金，开始投放广告的时候，一定要保证持续不断的影响力，并保持日常精力的投入和改进，这样才能让网站健康地持续发展，否则终究会变成一座「鬼城」。</p><h3 id="流动性"><a href="#流动性" class="headerlink" title="流动性"></a>流动性</h3><p>「U 的群体特征会引导C，同时也会更替U」，看到某贴在讨论如何看待社区里老人看待新人的话题，对应今天的城市，也就是最早期城市的土著们如何看待大量的流动的新进入人口的。</p><blockquote><p>当群体失去流动性的时候，这个群体就离死亡不远了，这里的死亡不是真正的死亡，而是一种失去主动进化意识的无意识停滞，而流动的方向和速度，是这个群体里的老人以及新人共同决定的。</p></blockquote><p>每一个城市，每一个社区，都有自己最初期的调性和氛围，这也是老人们愿意留守并且新人愿意进驻的基础原因，但是新人因为什么原因进入和自己进入后会有什么样的表现是分开和独立的，而这些真实的表现就在影响着流动的方向和速度，老人们有的选择顺应改变，有的选择离开，也有的选择视而不见，同样这些新人里有一部分也变为老人，这样的流动迭代，定义了城市发展的规模和特征。</p><p>从城市的角度看待小红书这款社区产品，这里的居民从最早的一二线白领女性，逐步拓展到城市中的年轻女生，然后到现在吸引着无论男女的年轻人。从社区内容上看，大家讨论的话题也从最早的护肤美妆类的商品购买和使用经验，到现在的吃喝玩乐衣食住行的全生活lifestyle的日常分享。这座城市的风景也从最早的干货经验性质的长图文表现形式，拓展到百花齐放的全品类生活图片加文字的日常碎片分享和记录，再到现在习以为常的短视频形态。在很长一段时间，小红书可以算是中国在UGC图文分享这个领域质量最高的一个社区，这也是这相当长一段时间大家愿意来到这座城市的原因。</p><p><img src="http://www.voicer.me/wp-content/uploads/2018/11/img_slide01_03-1.jpg" alt="image"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>想要得到一朵鲜花，你必须从一颗种子种起，设置好温度、湿度和光照，让它自然地生长出来，而不能把花瓣、叶子和根茎拼凑在一起。<strong>做社区也如是，你必须从最初的种子用户开始，慢慢地引导和培养社区的走向，和他们一起陪伴社区成长</strong>。</p><p>Jane Jacobs通过细致的观察和总结，将整个城市看作一个动态的有机体，重新提出了自己的设计思路，让人耳目一新，更让我触动的是当我以一个互联网产品的角色读到时给我带来的新的理解和思考。</p><p>带着「社区即城市」这样的视角，可以让我们<strong>避免落入沉醉于添加功能和创造形式的自我陶醉的怪圈，可以让我们更加 focus 从用户的视角去解读这个群体是如何真实运作的</strong>。</p><p>这个世界「应该」是什么样的，这个问题在每一个人的眼中都是不一样的，但是真相是客观存在的，我们应该更加关注这个世界「实际」是什么样的。只有在充分理解的情况下，我们才能在自然还原这个真实世界的基础上，去尝试梳理和引导，并且从中为这个世界创造价值，为我们的互联网社区用户们创造更大的价值。</p><hr><p>文章部分内容参考自：《互联网城市的死与生：用城市规划的方法建造网络社区》：<a href="https://36kr.com/p/5045889" target="_blank" rel="noopener">https://36kr.com/p/5045889</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章将从产品基本构成认识社区，从城市的角度理解社区以及社区的流动。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="社区" scheme="http://yoursite.com/tags/%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】《乌合之众》：大众心理研究</title>
    <link href="http://yoursite.com/2019/10/09/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%EF%BC%9A%E5%A4%A7%E4%BC%97%E5%BF%83%E7%90%86%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2019/10/09/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%EF%BC%9A%E5%A4%A7%E4%BC%97%E5%BF%83%E7%90%86%E7%A0%94%E7%A9%B6/</id>
    <published>2019-10-09T03:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.641Z</updated>
    
    <content type="html"><![CDATA[<p>罗伯特•墨顿的序：「勒庞《乌合之众》的得与失」提到一点，“《乌合之众》的当代意义，在于它发现问题的功能而非解决问题的功能。”</p><a id="more"></a><p>勒庞不是一个社会学家，但他对社会学有先天的本能。<br>首先，他先知般写道：“我们就要进入的时代，千真万确将是一个群体的时代。”（导言：群体的时代）</p><blockquote><p>在之前的时代里，民众的声音不受重视，到了那个年代，民主、大众传媒等的出现，让民众从各个阶层进入政治生活。</p></blockquote><h1 id="Ⅰ-群体心理"><a href="#Ⅰ-群体心理" class="headerlink" title="Ⅰ 群体心理"></a>Ⅰ 群体心理</h1><h2 id="一、-群体的一般特征"><a href="#一、-群体的一般特征" class="headerlink" title="一、 群体的一般特征"></a>一、 群体的一般特征</h2><p>自觉地个性消失，形成一种集体心理：无意识、低智力等。</p><ol><li>形成集体的个人会感觉到一种势不可挡的力量，使他敢于发泄出自本能的欲望。</li><li>传染的现象。</li><li>最重要的原因，同孤立的个人所表现出的特点截然相反。</li></ol><h2 id="二、群体的感情和道德观"><a href="#二、群体的感情和道德观" class="headerlink" title="二、群体的感情和道德观"></a>二、群体的感情和道德观</h2><p>在大多数群体中，可以看到如下特点：</p><ol><li>冲动、易变和急躁。“群体没有能力做任何长远的打算或思考。”</li><li>易受暗示和轻信。这是一种集体幻觉的机制。“群体永远漫游者无意识的领地。”“在暗示和相互传染的推动下，一个人编造的奇迹，立刻就会被所有的人接受。”</li><li>夸张与单纯。“群体表现出来的感情不管是好是坏，其突出的特点是极为简单而夸张。”“群体情绪的简单和夸张所造成的结果是，它全然不知怀疑和不确定性为何物。”勒庞还表面，“个人一旦成为群体的一员，他的智力立刻会大大下降。”</li><li>偏执、专横和保守。“群体只知道简单而极端的感情；提供给他们的各种意见、想法和信念，他们或者全盘接受，或者一概拒绝，将其视为绝对真理或绝对谬论。”还有一点，勒庞老师看得很精准：“群体随时会反抗软弱可欺者，对强权低声下气。如果强权时断时续，而群体又总是被极端情绪所左右，它便会表现得反复无常，时而无法无天，时而卑躬屈膝。”保守一说，则是“群体强烈地受着无意识因素的支配，因此很容易屈从于世俗的等级制，难免会十分保守”。</li><li>群体的道德。“群体的道德水平十分低劣。”人都有野蛮和破坏性的本能，如果加入到不负责任的群体，清楚不会受惩罚后，便会彻底放纵这种本能。群体可能无恶不作，也可能表现出极崇高的献身和牺牲举动，所以“以名誉、光荣和爱国主义作为号召，最有可能影响到组成群体的个人，而且经常可以达到使他慷慨赴死的地步”。</li></ol><h2 id="三、群体的观念、推理与想象力"><a href="#三、群体的观念、推理与想象力" class="headerlink" title="三、群体的观念、推理与想象力"></a>三、群体的观念、推理与想象力</h2><ol><li>群体的观念。“给群体提供的无论是什么观念，只有当它们具有绝对的、毫不妥协的和简单明了的形式时，才能产生有效的影响。因此它们都会披上形象化的外衣，也只有以这种形式，它们才能为群众所接受。”后面，勒老师提到的一点，可以看成是精英主义者得意的地方，实话说，我也认同这点：“就观念而言，群体总是落后于博学之士和哲学家好几代人。”</li><li>群体的理性。群体对事情的论证，从逻辑上看十分拙劣。其推理的特点，“是把彼此不同，只做表面上相似的事物搅在一起，并且立刻把具体的事物普遍化。”——这个在微博尤其明显，不管事实本身，只摘取简单的表象的相同点加以放大，后由此得出一个普遍化的结论，比如：官员都是弱智、路人都是冷漠等。</li><li>群体的想象力。群体的想象力强大而活跃，而且非常敏感。“在历史上，表象总是比真相起着更重要的作用，不现实的因素总是比现实的因素更重要。”“侵略者的权力和国家的威力，便是建立在群体的想象力上。”</li></ol><h2 id="四、群体信仰所采取的宗教形式"><a href="#四、群体信仰所采取的宗教形式" class="headerlink" title="四、群体信仰所采取的宗教形式"></a>四、群体信仰所采取的宗教形式</h2><p>说到底，就是崇拜一个神，盲目服从、残忍的偏执和要求狂热的宣传等。</p><blockquote><p>一切宗教或政治信条的创立者所以能够立住脚，皆因为他们成功激起了群众想入非非的感情，他们使群众中崇拜和服从中，找到了自己的幸福，随时准备为自己的偶像赴汤蹈火。这种任何时代概无例外。</p></blockquote><p>——这点来解释粉丝群体再合适不过了。</p><h1 id="Ⅱ-群体的意见与信念"><a href="#Ⅱ-群体的意见与信念" class="headerlink" title="Ⅱ 群体的意见与信念"></a>Ⅱ 群体的意见与信念</h1><p>第二卷里，勒庞讨论的几个问题，群体的意见和信念形成的间接和直接因素、群体领袖是什么人，他有怎样的动员手段、最后一点是群体的意见和信念中，有哪些是牢固的信念，哪些是多变的信念，以及这两种信念形成的原因。</p><h2 id="一、群体意见和信念中的间接因素"><a href="#一、群体意见和信念中的间接因素" class="headerlink" title="一、群体意见和信念中的间接因素"></a>一、群体意见和信念中的间接因素</h2><p>包括五种：种族；传统；时间；政治和社会制度；教育。</p><ol><li>种族。这一点作者没有详细讨论，他在另外一本书《民族演化的心理规律》里讨论过。</li><li>传统。从胚胎学可以证明，过去的时间对于生物进化的巨大影响，把这种理论放到历史学，也可以看出传统的重要性。因此勒老师坚持认为群体具有保守主义精神，哪些最狂暴的反叛最终也只会造成一些嘴皮子上的变化。勒庞老师难得地提到了中国，当作反面例子：“如果一个民族使自己在习俗变得过于牢固，它便不会再发生变化，于是就像中国一样，变得没有改进能力。”他的理想是这样的：“对于一个民族来说，理想的状态是保留过去的制度，只用不易察觉的方式一点一滴地加以改进。这种理想不易实现。使它变成现实的几乎只有古罗马人和近代英国人。”</li><li>时间。这点其实无须详细的论述，人人都懂，勒老师也只是提供一些名人名言式的说法，放到现在的最大作用就是让新周刊之类的官方微博有内容可以发早安晚安。比如，“它是惟一的创造者，也是惟一的伟大毁灭者。”“它们获得力量靠的是时间，失去力量也是因为时间。”“时间是我们最可靠的主人，为了看到一切事物有何变化，应当让它自由地发挥作用。”</li><li>政治和社会制度。勒老师认为，深刻影响群体禀性的手段，不能到制度中去寻找。他有个观点，“一个民族并没有真正改变其各种制度的能力。毫无疑问，以暴力革命为代价，它可以改变其名称，但是其本质依然如故。”——这说的不就是我党当年的革命和毛的各种手段嘛。。。</li><li>教育。很多人夸大了教育的作用了，“教育既不会使人变得更道德，也不会使他更幸福；它既不能改变他的本能，也不能改变他天生的热情，而且有时——只要进行不良引导即可——害处远大于好处。”然后，在如何让专业教育提供智力上，勒庞引用了丹纳（在本书里被翻译成泰纳，丹纳最出名的作品是《艺术哲学》，傅雷翻译的，非常好）的说明，可以详细看看。</li></ol><h2 id="二、群体意见和信念中的直接因素"><a href="#二、群体意见和信念中的直接因素" class="headerlink" title="二、群体意见和信念中的直接因素"></a>二、群体意见和信念中的直接因素</h2><p>包括四种：形象、词语和套话；幻觉；经验；理性。</p><ol><li>形象、词语和套话。勒老师这段讲得精彩啊：“最不明确的词语，有时反而影响最大。例如像民主、社会主义、平等、自由等等，它们的含义极为模糊，即使一大堆专著也不足以确定它们的所指。然而这区区几个词语的确有着神奇的威力，它们似乎是解决一切问题的灵丹妙药。各种极不相同的潜意识中的抱负及其实现的希望，全被它们集于一身。”然后，他还有一个有意思的结论：“统治者的艺术，就像律师的艺术一样，首先在于驾驭辞藻的学问。这门艺术遇到的最大困难之一，就是在同一个社会，同一个词对于不同的社会阶层往往有不同的含义，表面上看他们用词相同，其实他们说着不同的语言。”——这个放到我党身上，早年创造出的那套官话便是如此，当年洗脑成功，大家都认同，现在就不同了，而且的确同样的词在官方语境和民间语境的意思不同，比如一些大家熟悉的词：一小撮、不明真相等就是此类。再说远一点，《1984》里关于真理部、新词的描述，与这个遥相呼应。</li><li>幻觉。“自从出现文明以来，群体便一直处在幻觉的影响之下。他们为制造幻觉的人建庙塑像，设计祭坛，超过了所有其他人。”——嗯，不问苍生问鬼神就是此类。所以勒庞在后面又下结论：“推动各民族演化的主要因素，永远不是真理，而是谬误。”还有一点，勒庞说到了社会主义强大的原因：“它的鼓吹者是那些非常无视现实，因而敢于向人类承诺幸福的人。”</li><li>经验。经验可以让过于危险的幻想破灭，但需要发生在非常大的范围内，这个范围也包括时间，所以经验需要一再出现，而且通常“一代人的经验对下一代人是没多少用处的。”</li><li>理性。前面已经提到群体心理的非理性，为什么这里还要提到理性，勒庞主要强调的是理性的影响的消极价值。他对理性并没有好感，认为幻觉其实是必要的，而理性在历史上并没怎么指引过人类走上文明之路。“一切文明的主要动力并不是理性，倒不如说，尽管存在着理性，文明的动力仍然是各种感情——譬如尊严、自我牺牲、宗教信仰、爱国主义以及对荣誉的爱。”</li></ol><h2 id="三、群体领袖及其说服的手法"><a href="#三、群体领袖及其说服的手法" class="headerlink" title="三、群体领袖及其说服的手法"></a>三、群体领袖及其说服的手法</h2><ol><li>为什么只要有生物聚集（无论是人还是动物），就会有头领？领袖更有可能是个实干家而非思想家，意志坚强、有强大的信仰，而“聚集成群的人会完全丧失自己的意志，本能地转向一个具备他们所没有的品质的人。”“大多数人，尤其是群众中的大多数人，除了自己的行业之外，对任何问题都没有清楚而合理的想法。”</li><li>领袖的动员手段：断言、重复和传染。看到这个标题，首先我想起的是史玉柱的广告，比如脑白金，就符合这三个特点。勒庞说道：“一个断言越是简单明了，证据和证明看上去月贫乏，它就越有威力。一切时代的宗教书和各种法典，总是诉诸简单的断言。号召人们起来捍卫某项政治事业的政客，利用广告手段推销产品的商人，全都深知断言的价值。”进一步的是，“极为重要的修辞发只有一个，那就是重复”。</li><li>名望。名望是一种难以抗拒的力量，总括起来可以分为两类：先天的名望（称号、财富和名誉）和个人名望（其中提到拿破仑那部分很有意思，或者可以用现在更流行的词来表述：气场）。</li></ol><h2 id="四、群体的信念和意见的变化范围"><a href="#四、群体的信念和意见的变化范围" class="headerlink" title="四、群体的信念和意见的变化范围"></a>四、群体的信念和意见的变化范围</h2><p>主要分为两类：牢固、重要和持久的信念（如封建主义、基督教和新教）和短暂而易变的意见（如浪漫主义、自然主义或神秘主义）。</p><ol><li>牢固的信念。“伟大的普遍信仰数量十分有限。它们的兴衰是每一个文明种族的历史上令人瞩目的事件。它们构成了文明的真正基础。”，还有一个特点，“建立普遍信念的道路可谓困难重重，不过一旦它站稳了脚跟，它便会具有不可征服的力量，无论从哲学上看它多么荒谬，它都会进入最清醒的头脑。”基本的信念，大多是宗教信仰的产物。而勒庞认为，共产主义“只能算是等而下之的信仰”。</li><li>群体意见的多变。“一切与民族的普遍信念和情感相悖的东西，都没有持久力，逆流不久便又回到了主河道。”群众易变的意见多，有三个原因：首先，过去的信仰失去了影响力，普遍信仰衰落；其次，群众的势力在不断增长，这种势力越来越没有制衡的力量。第三个原因是报业的发展（勒庞那个年代才开始的，到20世纪后乃至网络时代，大众媒体的这点影响越来越大），不断地把完全对立的意见带到群众面前。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;罗伯特•墨顿的序：「勒庞《乌合之众》的得与失」提到一点，“《乌合之众》的当代意义，在于它发现问题的功能而非解决问题的功能。”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://yoursite.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【理论】FOR模型对于产品增长的作用</title>
    <link href="http://yoursite.com/2019/09/27/%E3%80%90%E7%90%86%E8%AE%BA%E3%80%91FOR%E6%A8%A1%E5%9E%8B%E5%AF%B9%E4%BA%8E%E4%BA%A7%E5%93%81%E5%A2%9E%E9%95%BF%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/27/%E3%80%90%E7%90%86%E8%AE%BA%E3%80%91FOR%E6%A8%A1%E5%9E%8B%E5%AF%B9%E4%BA%8E%E4%BA%A7%E5%93%81%E5%A2%9E%E9%95%BF%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2019-09-27T03:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.641Z</updated>
    
    <content type="html"><![CDATA[<p>信息碎片化、组织、再组织</p><a id="more"></a><h2 id="什么样的产品更有可能获得高速增长？"><a href="#什么样的产品更有可能获得高速增长？" class="headerlink" title="什么样的产品更有可能获得高速增长？"></a>什么样的产品更有可能获得高速增长？</h2><p>新美联合集团CEO陈琪在很久之前提出了FOR模型来判断：</p><blockquote><p>Fragments 碎片<br>Organize 组织<br>Re-Organize 再组织</p></blockquote><h3 id="特征1：碎片（Fragments）"><a href="#特征1：碎片（Fragments）" class="headerlink" title="特征1：碎片（Fragments）"></a>特征1：碎片（Fragments）</h3><blockquote><p>产品中的主要内容，一定是碎片化的，而且碎片是同构的。</p></blockquote><p>比如Twitter把「一切事物」碎片为140个字、新浪微博把「一切事物」碎片为140个字+一张图。<br>“碎片的丰富性”基本上决定了这个产品最终平台化之后的基础规模，所以我们可以很容易看到新浪微博的规模百分之百的要比蘑菇街大，因为它的碎片是「一切事物」，而蘑菇街只是「所有美好的女性商品」。</p><blockquote><p>产品的定语越多，规模越小。</p></blockquote><h3 id="特征2：组织（Organize）"><a href="#特征2：组织（Organize）" class="headerlink" title="特征2：组织（Organize）"></a>特征2：组织（Organize）</h3><p>为什么要碎片化？</p><blockquote><p>因为同构的碎片很容易以各种维度被组织起来。</p></blockquote><p>twitter——按时间线组织<br>Tumblr——按标签组织</p><blockquote><p>信息沉淀和信息流转的速度成反比，这跟信息的组织形式是密切相关的。<br>信息的组织形式越自由，信息流动的速度越快，也越难以获得沉淀</p></blockquote><p>因为时间线是最自由的组织形式，所以新浪微博的信息流转最快，但信息很快过期；</p><p>蘑菇街的组织形式受商品天然品类的边界限制，所以流转相对较慢，但是信息可以在一定程度上沉淀，挖掘出「最热」的商品来引导有「从众心理」的用户。</p><h3 id="特征3：再组织（Re-Organize）"><a href="#特征3：再组织（Re-Organize）" class="headerlink" title="特征3：再组织（Re-Organize）"></a>特征3：再组织（Re-Organize）</h3><p>当信息碎片按某种形式组织好之后，这样的产品还会允许用户用非常自由的手段重新组织信息碎片。</p><p>举例：</p><ol><li>比如新浪微博的「转发」功能，就是把别人的信息碎片重组到自己的时间线中;  </li><li>小红书的「喜欢」功能，可以把别人分享的好内容，极快地收藏到自己的专辑中。</li></ol><p>总结：</p><blockquote><p>再组织的本质作用是将有限的内容尽可能充分地重复利用，以此提高生产率。  </p></blockquote><p>与信息流转速度恰好相反，信息的沉淀跟再组织的多样性，成正比。</p><h2 id="为什么满足FOR模型的产品有更高的概率获得较快成长？"><a href="#为什么满足FOR模型的产品有更高的概率获得较快成长？" class="headerlink" title="为什么满足FOR模型的产品有更高的概率获得较快成长？"></a>为什么满足FOR模型的产品有更高的概率获得较快成长？</h2><ul><li>生产率<br>符合FOR模型的产品，相比传统产品有更高的信息使用率，因此生产率更高。这是本质原因。</li><li>适合移动设备，内容碎片化，自由的组织形式和再组织动作的轻量化，利于浏览和分发。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>在互联网的产品中，信息越碎片，信息越容易组织，用户参与的再次组织多样性，决定了产品的成长。</li><li>信息的流动速度与信息的沉淀成反比。即信息流转越快，信息过期越快。</li><li>用户参与下的信息再组织越多样，信息越能留存下来。即再组织多样性与信息沉淀成正比。</li><li>合理进行数据信息的多次组织，可以实现有限信息的多次重复利用，提高信息的利用率。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信息碎片化、组织、再组织&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="增长" scheme="http://yoursite.com/tags/%E5%A2%9E%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>【理论】奥卡姆剃刀原理</title>
    <link href="http://yoursite.com/2019/09/25/%E3%80%90%E7%90%86%E8%AE%BA%E3%80%91%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/25/%E3%80%90%E7%90%86%E8%AE%BA%E3%80%91%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80%E5%8E%9F%E7%90%86/</id>
    <published>2019-09-25T03:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.641Z</updated>
    
    <content type="html"><![CDATA[<p>如无必要，勿增实体。</p><a id="more"></a><h2 id="奥卡姆剃刀定理说明"><a href="#奥卡姆剃刀定理说明" class="headerlink" title="奥卡姆剃刀定理说明"></a>奥卡姆剃刀定理说明</h2><blockquote><p>奥卡姆剃刀原理（Occam’s Razor, Ockham’s Razor）是由14世纪英格兰的逻辑学家、圣方济各会修士奥卡姆的威廉（William of Occam，约1285年至1349年）提出。这个原理称为“如无必要，勿增实体”，即“简单有效原理”。正如他在《箴言书注》2卷15题说“切勿浪费较多东西去做，用较少的东西，同样可以做好的事情。”<br>为什么要将复杂变简单呢？因为复杂容易使人迷失，只有简单化后才利于人们理解和操作。随着社会、经济的发展，时间和精力成为人们的稀缺资源，管理者的时间更加有限，许多终日忙忙碌碌的管理者却鲜有成效，究其原因正是缺乏简单管理的思维和能力，分不清“重要的事”与“紧迫的事”，结果成为了低绩效或失败的管理者。从这个意义上讲，管理之道就是简化之道，简化才意味着对事务真正的掌控。<br>简单管理对于处于转型和成长时期的中国企业具有非凡的意义，简单管理本身却不简单。奥卡姆剃刀定律也认为把事情变复杂很简单，把事情变简单很复杂。一些人动辄以“无为而治”、“治大国若烹小鲜”来概括简单管理，又有几人能若庖丁般游刃有余？我们所知道的一流的企业家无不抱着异常谨慎的态度经营企业，如比尔盖茨“微软离破产只有18个月”的论断、张瑞敏“战战兢兢、如履薄冰”的心态以及任正非一直所担忧的“华为的冬天”。可见，简单管理作为一种古老而崭新的管理思维和能力，蕴涵着深刻的内涵。<br>只承认确实存在的东西，认为那些空洞无物的普遍性概念都是无用的累赘，应当被无情地“剃除”。他主张“如无必要，勿增实体”，即“简单有效原理”。这把剃刀曾使很多人感到威胁，被认为是异端邪说，威廉本人也因此受到迫害。然而，并未损害这把刀的锋利，相反，经过数百年的岁月，奥卡姆剃刀已被历史磨得越来越快，并早已超载原来狭窄的领域，而具有广泛、丰富、深刻的意义。</p></blockquote><p>（以上内容来自百度百科）</p><p>上面的话简而概之就是：保持事情的简单性，抓住根本，解决实质的问题，不需要人为地把事情复杂化，这样我们才能更快更有效率的将事情处理好。而且多出来的东西未必是有益的，相反更容易使我们为自己制造的麻烦而烦恼。</p><blockquote><p>如无必要，勿增实体。</p></blockquote><p>奥卡姆剃刀原理在现实的各个领域都有很好的应用，德国建筑大师路德维希·密斯·凡德罗坚持“少即是多”的建筑设计理念，他的设计作品中各个细节都精简到不可再精简的绝对境界，去除不必要的装饰，保留核心元素并将其提炼升华，成为了极简主义的典范。</p><h3 id="产品-交互设计时该注意什么"><a href="#产品-交互设计时该注意什么" class="headerlink" title="产品/交互设计时该注意什么"></a>产品/交互设计时该注意什么</h3><p>人们都说：“乔布斯对产品极简的偏执成就了苹果公司”，他在硬件和软件产品设计中都主张极简，iPhone摒弃了按键键盘操作，剔除了所有可以剔除的按钮，正面仅保留一个HOME键，让手机操作更加简单，不仅彻底改变了用户的使用模式，而且也重新定义了智能手机。无论是二十几年前横空出世的Foxmail，还是十几年前优化后的QQ邮箱，或是拥有十亿用户的传奇霸主微信，都证明张小龙是极简主义设计的优秀践行者，以用户价值为中心，回归本原，以终为始，打造极致的产品体验。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573051772155&di=833d192a3a09722c53fe1fba46dd0565&imgtype=0&src=http%3A%2F%2Fimgs.ebrun.com%2Fresources%2F2014_07%2F2014_07_02%2F201407023651404268008663_origin.jpg" alt="image"></p><p>将奥卡姆剃刀理论应用于产品设计中，让产品更简单。</p><ol><li><strong>合并重复的功能，保持界面简洁</strong></li><li><strong>整合多余流程，缩短使用路径</strong></li><li><strong>Don’t make me think</strong></li></ol><p>在整个产品开发期间我们会有意无意地创建很多模块，版面或者元素，而它们的功能可能有些是重叠的。此种情况表明界面已经过度设计了。时刻警惕这些冗余的功能模块，它无用且降低了电脑性能。此外，界面上模块越多，用户的学习成本就越大。所以请考虑重构你的界面使它足够精简。</p><p>例如，一个服务官网的侧边栏同时显示着「立即致电」和「联系电话」，功能冗余，也分散了用户注意力。</p><p>观察微信和京东话费充值的支付操作，微信直接点击充值金额即跳出支付界面，而京东充值在选择了充值金额后，还要再点击「确认」才跳到支付界面，这一步骤在我看来是没有必要的，因为大部分用户在打开app之前心里已知晓充值金额，即使京东这样做是为了提醒用户可以用京豆和优惠券抵扣，可以将其放在支付界面里，会更容易被用户察觉和选择。</p><p>简单的洁面能更好传达你要表达的内容。更能锁住用户的眼球，使之专心在你要表达的内容上。复杂的页面会让用户一时找不到信息的重点，也分散了访客的注意力。如用一个页面来表达产品，若采用三竖栏的结构就会显得很复杂，若采用两竖栏来展示，宽的竖栏做图片展示和性能介绍，窄的做次要的介绍或图片导航，这样能带给访客更好地阅读效果，顾客更有耐心阅读，你所要通过网站表达的内容也就能更好的传递到用户眼前。<br>着重强调一下，凡事过之不及，我们必须把握住最靠近临界点的一个度。如果说为了追求简单，提高用户体验而牺牲网站的基本功能，那就得不偿失了。</p><h3 id="将产品做简单的秘诀就是抽象，分类"><a href="#将产品做简单的秘诀就是抽象，分类" class="headerlink" title="将产品做简单的秘诀就是抽象，分类"></a>将产品做简单的秘诀就是抽象，分类</h3><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573750001462&di=5260460e12af822ffd6b4ac375597387&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Ftranslate%2F20170925%2FoWxO-fymfcih4914222.jpg" alt="微信启动"></p><p>微信为什么会简单，因为微信有足够抽象和分类的机制。微信的四个Tab，不会变多估计也不会变少。为什么？因为微信有商业的压力，所以他无法变少。但是也不会变多，因为产品刻意做好了抽象，做好分类。</p><p>看微信的tab，开始是“找朋友”，后面变成“朋友们”，现在变成是“发现”，<strong>为什么叫“发现”？因为“发现”特么的是抽象到一个“基类”，“基类”就是世界万物的最根本的状态，因为你足够抽象，你会发现我们往里面放啥都不觉得奇怪</strong>。</p><p>再一个例子，微信第四个Tab叫“我”，原来放“设置”的地方。为什么会把“设置”抽象成“我”？</p><p><strong>学会抽象的办法就是找共性。</strong><br><strong>层级是什么？层级就是分类。</strong><br><strong>人天然就是会分类的。</strong>  </p><p><strong>最后，当你抽象和分类的时候，一定不要忘了充分感受用户的认知。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如无必要，勿增实体。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品经理 Knowledge Map" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-Knowledge-Map/"/>
    
      <category term="体验" scheme="http://yoursite.com/tags/%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>So You’re Lost in Your Twenties</title>
    <link href="http://yoursite.com/2019/09/23/So-You%E2%80%99re-Lost-in-Your-Twenties/"/>
    <id>http://yoursite.com/2019/09/23/So-You%E2%80%99re-Lost-in-Your-Twenties/</id>
    <published>2019-09-23T07:48:21.000Z</published>
    <updated>2019-11-20T14:58:45.640Z</updated>
    
    <content type="html"><![CDATA[<p>“I feel like I’m in the middle of the ocean. Like I could swim in any direction but I can’t see land on any side so I don’t know which way to go.”</p><a id="more"></a><p>In Meg Jay’s book The Defining Decade, she describes twenty-somethings in a way that every twenty-something can intimately recognize:</p><blockquote><p>“I feel like I’m in the middle of the ocean. Like I could swim in any direction but I can’t see land on any side so I don’t know which way to go.”</p></blockquote><p>We’re told that in our twenties we can be wild. We can do anything. In fact, what we do hardly even matters for the rest of our lives, right? Right? But with every option available, the bar rises. When you can do anything, you aren’t simply looking to find land. It has to be the best land. What if you swim all that way, with every option in the world in your wake, and you find you’ve landed on something that isn’t the best? And you’re stuck there forever?</p><p>You won’t and you’re not.</p><p>Let me regale you with my personal story of how I went from having nothing to put on a resume to landing my dream job — in two years. I’ll make it quick, and then I’m going to tell you which way to swim.</p><p>In my earliest twenties, I graduated college. I worked as a camp counselor all summer; I cleaned skis for rich people at a lodge all winter; I launched gliders at an airport. My degree was in English, and by the time I was 24 I was already using my diploma to sop up the leftover beer at the restaurant where I was a bartender. The foundation for my future was laid.</p><p>I was working in an entry-level PR position when I received the first piece of advice that pointed me toward the direction I should swim, delivered by my cranky, old Irish boss:</p><p>“Have the courage of your convictions, and be your own man, god damn it.”</p><p>His advice backfired on him pretty badly. I summoned up the courage of my convictions and left that job. I sold any of my belongings that wouldn’t fit in a car, left my home state, and drove to San Francisco with no job lined up and no apartment prospects. It was scary, but you know what feels infinitely worse than being scared? Talking like you’re going to take a risk, but knowing — on the inside — you never will. Feeling like a fraud is decidedly worse than feeling afraid. I was tired of telling everyone I was going to take that big risk and move, but being scared to sacrifice the comforts of my hometown. I can tell you, nothing I’ve done has scared me more than that move did, but I knew that a life of regret would have been the most terrifying thing of all.</p><p>I made it to San Francisco thinking I could be the CEO of a start-up! Become best friends with Zuck! Maybe I’ll learn to code and cash in on those #freshtechcoins!</p><p>Nope.</p><p>My one friend in the city was a nanny, and when a family she knew asked for help bringing their kids to sports games on Wednesday afternoons, that was the glorious Bay Area job I took. Beggars can’t be choosers, so they say (or at least that’s what my mother says). That job turned quickly into Wednesday and Thursdays. Then Wednesday, Thursday, Friday. Soon it was a seven-days-a-week stint. Instead of shooting the shit with Elon, I was a bona fide manny. I stayed at that job (and loved it) for two years.</p><p>So, at 26 I’m a full-time manny with a resume that includes a smattering of service-industry jobs and an entry level PR job that is now two years old. Sounds like bad news, but I have some good momentum to report, dear swimmers:</p><p>By the time I was 27, I was working at Facebook. And then Oculus. When I turned 28 I landed my dream job at WIRED magazine.</p><p>I’ll tell you how I swam, in the hopes it helps you swim, too.</p><p>Fake it till you make it.</p><p>You’ve heard this before, but I’m going to give you some set rules. I don’t fake it unless I think I can learn it in a weekend. Anything I think I can learn in 48 hours or less, I’ll say I can do. If I think it’s going to take a year of schooling to get it, saying I can already do it is just lying. It’s a disservice to yourself and to others. When you look at job qualifications, don’t wonder if you have them, go get them. You need to know SQL for a job? There are plenty of online courses. You need social media experience? Take a course, shadow someone, and then run social for someone for free. You are not bound to your current resume, and a little bit of faking it can go a long way.</p><p>But an important note: remember that once you do make it, you’re not faking it anymore. I felt like I was faking it all the way into my current job, but now I actually do it. The faking part is temporary. Don’t sell yourself short on how talented and capable you really are.</p><p>But, on that note…</p><p>No one truly knows what they’re doing.</p><p>Sure, some know more than others, but no one is a master of what they do. In fact, saying you are a master is a telltale sign you’re not. I don’t say this to be pessimistic, I say it to remind you that the boat you’re in is full of people just like you. Everyone is faking it to varying degrees, and, while their insides are swirling, they’re all looking around and wondering how everyone else seems to be doing just fine. Just like you. We’re all just trying to make it out here. That being said, making big decisions, when you aren’t totally sure those decisions are the right ones, can be hard. The most important piece of advice I’ve ever gotten regarding decision-making was from my mother.</p><p>One big decision won’t define your life.</p><p>You’ll wake up the next morning and make more decisions, and more after that. It can be so easy to get caught up in choosing one decision, choosing a course in a crossroad that you believe will alter the direction of your life. The thing is, after you choose that road, you then get to choose the next step you take. Is it into the woods? Is it further down the path? Is it back to the former crossroad? Are you going to jump in the lake? Who knows! But those are all calls you get to make after your big “crossroad” decision. Don’t put too much stock in any one decision. Pick a direction and swim toward it. The land you find is the land you’re supposed to be on, and if you decide you hate that land, well, get back in the water and try again.</p><p>My advice? You’ve got time. Take a breath. It will all work out how it’s supposed to. If there’s a lesson to be learned here, it’s that if I can do it, so can you. A willingness to work hard and an insatiable optimism were my only tools, but those tools are all you need. Push. And push. And when it feels like nothing’s moving, push one more time. Say yes. Inspire, and be inspired. Believe in others, and let them believe in you. Fake. It. Till. You. Make. It. And then make it. Choose your happiness above all else, and stay contagiously optimistic. Things will have to go your way, you’ll make sure of it.</p><hr><p>Article from @AlexWhitcomb <a href="https://medium.com/s/story/so-youre-lost-in-your-twenties-this-can-help-8543519677d4" target="_blank" rel="noopener">https://medium.com/s/story/so-youre-lost-in-your-twenties-this-can-help-8543519677d4</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“I feel like I’m in the middle of the ocean. Like I could swim in any direction but I can’t see land on any side so I don’t know which way to go.”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="成长" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】常用SQL总结</title>
    <link href="http://yoursite.com/2018/04/17/%E5%B8%B8%E7%94%A8SQL%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/04/17/%E5%B8%B8%E7%94%A8SQL%E6%80%BB%E7%BB%93/</id>
    <published>2018-04-17T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.642Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SELECT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 列名称 FROM 表名称</span><br><span class="line"></span><br><span class="line">SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</span><br></pre></td></tr></table></figure><p><strong>ORDER BY</strong><br>ORDER BY 语句用于根据指定的列对结果集进行排序。(DECS为逆序)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Company, OrderNumber FROM Orders ORDER BY Company DESC</span><br></pre></td></tr></table></figure><p><strong>INSERT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)</span><br></pre></td></tr></table></figure><p><strong>UPDATE</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</span><br></pre></td></tr></table></figure><p><strong>DELETE</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名称 WHERE 列名称 = 值</span><br></pre></td></tr></table></figure><p><strong>TOP</strong><br>TOP 子句用于规定要返回的记录的数目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TOP 2 * FROM Persons</span><br></pre></td></tr></table></figure><p><strong>LIKE</strong><br>LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons</span><br><span class="line">WHERE City LIKE &apos;%lon%&apos;</span><br></pre></td></tr></table></figure><p><strong>IN</strong><br>IN 操作符允许我们在 WHERE 子句中规定多个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Persons</span><br><span class="line">WHERE LastName IN (&apos;Adams&apos;,&apos;Carter&apos;)</span><br></pre></td></tr></table></figure><p><strong>JOIN</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line">FROM Persons, Orders</span><br><span class="line">WHERE Persons.Id_P = Orders.Id_P </span><br><span class="line"></span><br><span class="line">SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line">FROM Persons</span><br><span class="line">INNER JOIN Orders</span><br><span class="line">ON Persons.Id_P = Orders.Id_P</span><br><span class="line">ORDER BY Persons.LastName</span><br></pre></td></tr></table></figure><p>JOIN 类型，以及它们之间的差异。 </p><ul><li>JOIN: 如果表中有至少一个匹配，则返回行</li><li>LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行</li><li>RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行</li><li>FULL JOIN: 只要其中一个表中存在匹配，就返回行</li></ul><p><strong>UNION 和 UNION ALL</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">列出所有在中国和美国的不同的雇员名：</span><br><span class="line"></span><br><span class="line">SELECT E_Name FROM Employees_China</span><br><span class="line">UNION</span><br><span class="line">SELECT E_Name FROM Employees_USA</span><br><span class="line"></span><br><span class="line">//UNION ALL 命令会列出所有的值。</span><br></pre></td></tr></table></figure><p><strong>SELECT INTO</strong><br>从一个表中选取数据，然后把数据插入另一个表中。<br>SELECT INTO 语句常用于创建表的备份复件或者用于对记录进行存档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">INTO Persons_backup</span><br><span class="line">FROM Persons</span><br></pre></td></tr></table></figure><p>IN 子句可用于向另一个数据库中拷贝表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">INTO Persons IN &apos;Backup.mdb&apos;</span><br><span class="line">FROM Persons</span><br></pre></td></tr></table></figure><p>如果我们希望拷贝某些域，可以在 SELECT 语句后列出这些域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT LastName,FirstName</span><br><span class="line">INTO Persons_backup</span><br><span class="line">FROM Persons</span><br></pre></td></tr></table></figure><p><strong>创建数据库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE database_name</span><br></pre></td></tr></table></figure><p><strong>创建表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名称</span><br><span class="line">(</span><br><span class="line">列名称1 数据类型,</span><br><span class="line">列名称2 数据类型,</span><br><span class="line">列名称3 数据类型,</span><br><span class="line">....</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>SQL约束</strong><br>NOT NULL 约束强制列不接受 NULL 值。</p><p>UNIQUE 约束唯一标识数据库表中的每条记录。</p><p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</p><p>PRIMARY KEY 拥有自动定义的 UNIQUE 约束。</p><p>每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p><p><strong>PRIMARY KEY</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PRIMARY KEY (Id_P)</span><br><span class="line"></span><br><span class="line">CONSTRAINT pk_PersonID PRIMARY KEY (Id_P,LastName) //命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束</span><br><span class="line"></span><br><span class="line">ADD PRIMARY KEY (Id_P) //在表已存在的情况下为 &quot;Id_P&quot; 列创建 PRIMARY KEY 约束</span><br><span class="line"></span><br><span class="line">DROP PRIMARY KEY //撤销</span><br></pre></td></tr></table></figure><p><strong>FOREIGN KEY</strong><br>一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)</span><br></pre></td></tr></table></figure><p><strong>CHECK</strong> 约束<br>  用于限制列中的值的范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CHECK (Id_P&gt;0) //创建表时限制</span><br><span class="line"></span><br><span class="line">ADD CHECK (Id_P&gt;0)//表已存在的情况下</span><br></pre></td></tr></table></figure><p><strong>CREATE INDEX</strong> 语句用于在表中创建索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name (column_name)</span><br></pre></td></tr></table></figure><p><strong>Auto-increment</strong> 会在新记录插入表中时生成一个唯一的数字。</p><p><strong>ALTER TABLE</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD column_name datatype</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>PHP函数方法学习与总结</title>
    <link href="http://yoursite.com/2018/03/10/PHP%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/10/PHP%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2018-03-10T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="Immutable"><a href="#Immutable" class="headerlink" title="Immutable"></a>Immutable</h4><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$f = <span class="function"><span class="keyword">function</span><span class="params">($x, ...$ys)</span> </span>&#123;&#125;;</span><br><span class="line">array_map($f, $xs);</span><br><span class="line">array_map($f, $xs, ...$yss);</span><br><span class="line">array_map(<span class="keyword">null</span>, $xs);</span><br><span class="line">array_map(<span class="keyword">null</span>, $xs, ...$yss);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xs.map(f)</span><br><span class="line">xs.map(<span class="function">(<span class="params">x, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ys = yss.map(<span class="function">(<span class="params">ys, i</span>) =&gt;</span> ys[i])</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;)</span><br><span class="line">[xs]</span><br><span class="line">[xs, ...yss]</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_filter($xs, $f);</span><br><span class="line">array_filter($xs, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xs.filter(f)</span><br><span class="line">xs.filter(id)</span><br></pre></td></tr></table></figure><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_reduce($xs, $f, $init);</span><br><span class="line">array_reduce(array_reverse($xs), $f, $init);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xs.reduce(f, init)</span><br><span class="line">xs.reduceRight(f, init)</span><br></pre></td></tr></table></figure><h5 id="traverse"><a href="#traverse" class="headerlink" title="traverse"></a>traverse</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$f = <span class="function"><span class="keyword">function</span><span class="params">($x, $key)</span> </span>&#123;&#125;</span><br><span class="line">array_walk($xs, $f);</span><br><span class="line"><span class="keyword">foreach</span> ($xs <span class="keyword">as</span> $x)</span><br><span class="line"><span class="keyword">foreach</span> ($xs <span class="keyword">as</span> $key =&gt; $val)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xs.forEach(f)</span><br></pre></td></tr></table></figure><h5 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_slice($xs, $start, $len);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> end = start + len</span><br><span class="line">xs.slice(start, end)</span><br></pre></td></tr></table></figure><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_search($x, $xs); <span class="comment">// return false if not found</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xs.indexOf(x)</span><br><span class="line">xs.find(f)</span><br><span class="line">xs.findIndex(f)</span><br><span class="line">xs.includes(x)</span><br></pre></td></tr></table></figure><h5 id="length"><a href="#length" class="headerlink" title="length"></a>length</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count($xs);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xs.length</span><br></pre></td></tr></table></figure><h5 id="has"><a href="#has" class="headerlink" title="has"></a>has</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_key_exists($key, $xs);</span><br><span class="line"><span class="keyword">isset</span>($xs[$key]); <span class="comment">// return false if null</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.has(xs, key)</span><br><span class="line">!!xs[key]</span><br></pre></td></tr></table></figure><h5 id="keys-values"><a href="#keys-values" class="headerlink" title="keys / values"></a>keys / values</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_keys($xs);</span><br><span class="line">array_values($xs);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(xs)</span><br><span class="line"><span class="built_in">Object</span>.values(xs)</span><br></pre></td></tr></table></figure><h5 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_unique($xs);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>(xs)]</span><br></pre></td></tr></table></figure><h5 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_fill($start, $len, $x); <span class="comment">// fill by ref</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> end = start + len</span><br><span class="line"><span class="built_in">Array</span>(end).fill(x, start, end) <span class="comment">// fill by ref</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">Array</span>(end), (_, i) =&gt; start &lt;= i &amp;&amp; i &lt; end ? x : <span class="literal">undefined</span>) <span class="comment">// fill by val</span></span><br></pre></td></tr></table></figure><h5 id="concat-merge"><a href="#concat-merge" class="headerlink" title="concat / merge"></a>concat / merge</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_merge(...$xss);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[].concat(...xss)</span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, ...xss)</span><br></pre></td></tr></table></figure><h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_combine($xs, $ys);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xs.reduce(<span class="function">(<span class="params">acc, x, i</span>) =&gt;</span> (&#123; ...acc, &#123; [x]: ys[i] &#125; &#125;), &#123;&#125;)</span><br></pre></td></tr></table></figure><h5 id="sum-product"><a href="#sum-product" class="headerlink" title="sum / product"></a>sum / product</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_sum($xs);</span><br><span class="line">array_product($xs);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xs.reduce(<span class="function">(<span class="params">acc, x</span>) =&gt;</span> acc + x, <span class="number">0</span>)</span><br><span class="line">xs.reduce(<span class="function">(<span class="params">acc, x</span>) =&gt;</span> acc * x, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_count_values($xs);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xs.reduce(<span class="function">(<span class="params">acc, x</span>) =&gt;</span> (<span class="built_in">Reflect</span>.has(acc, x) ? acc[x]++ : (acc[x] = <span class="number">1</span>)) &amp;&amp; acc, &#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="Mutable"><a href="#Mutable" class="headerlink" title="Mutable"></a>Mutable</h4><h5 id="push-pop-unshift-shift"><a href="#push-pop-unshift-shift" class="headerlink" title="push / pop / unshift / shift"></a>push / pop / unshift / shift</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$xs[] = $x;</span><br><span class="line">array_push($xs, ...$ys);</span><br><span class="line">array_pop($xs);</span><br><span class="line">array_unshift($xs, ...$ys);</span><br><span class="line">array_shift($xs);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mutable</span></span><br><span class="line">xs.push(...ys)</span><br><span class="line">xs.pop()</span><br><span class="line">xs.unshift(...ys)</span><br><span class="line">xs.shift()</span><br><span class="line"><span class="comment">// Immutable</span></span><br><span class="line">[...xs, ...ys]</span><br><span class="line">xs.slice(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">[...ys, ...xs]</span><br><span class="line">xs.slice(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_splice($xs, $start, $len, $ys);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xs.splice(start, len, ...ys)</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explode($seperator, $str);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(seperator)</span><br></pre></td></tr></table></figure><h5 id="join"><a href="#join" class="headerlink" title="join"></a>join</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implode($seperator, $xs);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xs.join(seperator)</span><br></pre></td></tr></table></figure><h5 id="length-1"><a href="#length-1" class="headerlink" title="length"></a>length</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen($str);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.length</span><br></pre></td></tr></table></figure><h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substr($str, $start, $len);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> end = start + len</span><br><span class="line">str.slice(start, end)</span><br><span class="line">str.substr(start, len)</span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><h5 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$curry = <span class="function"><span class="keyword">function</span><span class="params">($f, $len = <span class="number">-1</span>)</span> <span class="title">use</span><span class="params">(&amp;$curry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!~$len) &#123;</span><br><span class="line">        $ref = <span class="keyword">new</span> ReflectionFunction($f);</span><br><span class="line">        $len = $ref -&gt; getNumberOfParameters();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(...$args)</span> <span class="title">use</span><span class="params">($curry, $f, $len)</span> </span>&#123;</span><br><span class="line">        $sub = count($args);</span><br><span class="line">        <span class="keyword">return</span> $sub &lt; $len ? $curry(<span class="function"><span class="keyword">function</span><span class="params">(...$rest)</span> <span class="title">use</span><span class="params">($f, $args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $f(...$args, ...$rest);</span><br><span class="line">        &#125;, $len - $sub) : $f(...$args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">f, len = f.length</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sub = args.length</span><br><span class="line">    <span class="keyword">return</span> sub &lt; len ? curry(<span class="function">(<span class="params">...rest</span>) =&gt;</span> f(...args, ...rest), len - sub) : f(...args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$compose = <span class="function"><span class="keyword">function</span><span class="params">(...$funcs)</span> </span>&#123;</span><br><span class="line">    $len = count($funcs);</span><br><span class="line">    <span class="keyword">return</span> $len ? <span class="function"><span class="keyword">function</span><span class="params">(...$args)</span> <span class="title">use</span><span class="params">($funcs, $len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_reduce(array_reverse(array_slice($funcs, <span class="number">0</span>, <span class="number">-1</span>)), <span class="function"><span class="keyword">function</span><span class="params">($composed, $f)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $f($composed);</span><br><span class="line">        &#125;, $funcs[$len - <span class="number">1</span>](...$args));</span><br><span class="line">    &#125; : <span class="function"><span class="keyword">function</span><span class="params">($arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $arg;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...funcs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> len = funcs.length</span><br><span class="line">    <span class="keyword">return</span> len ? <span class="function">(<span class="params">...args</span>) =&gt;</span> funcs.slice(<span class="number">0</span>, <span class="number">-1</span>).reduceRight(</span><br><span class="line">        (composed, f) =&gt; f(composed), funcs[len - <span class="number">1</span>](...args)</span><br><span class="line">    ) : <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Yii"><a href="#Yii" class="headerlink" title="Yii"></a>Yii</h1><h2 id="WebApplication"><a href="#WebApplication" class="headerlink" title="WebApplication"></a>WebApplication</h2><h5 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::createWebApplication($config) -&gt; run();</span><br></pre></td></tr></table></figure><h5 id="retrieve"><a href="#retrieve" class="headerlink" title="retrieve"></a>retrieve</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::app() <span class="comment">// Singleton</span></span><br></pre></td></tr></table></figure><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h5 id="retrieve-1"><a href="#retrieve-1" class="headerlink" title="retrieve"></a>retrieve</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::app() -&gt; $component;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><h4 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h4><h5 id="default"><a href="#default" class="headerlink" title="default"></a>default</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"https://hostname/index.php?r=$module/$controller/$action&amp;param=$param..."</span></span><br><span class="line">$url = <span class="keyword">$this</span> -&gt; createUrl($route, $param);</span><br></pre></td></tr></table></figure><h5 id="User-friendly"><a href="#User-friendly" class="headerlink" title="User-friendly"></a>User-friendly</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.php</span></span><br><span class="line"><span class="string">'urlManager'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'urlFormat'</span> =&gt; <span class="string">'path'</span>,</span><br><span class="line">    <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">'rules'</span>: <span class="keyword">array</span>(</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="string">"https://hostname/$module/$controller/$action?param=$param..."</span></span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonController</span> <span class="keyword">extends</span> <span class="title">CController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'edit'</span> =&gt; <span class="string">'application.controllers.common.EditAction'</span>,</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditAction</span> <span class="keyword">extends</span> <span class="title">CAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Filter-Middleware"><a href="#Filter-Middleware" class="headerlink" title="Filter (Middleware)"></a>Filter (Middleware)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonController</span> <span class="keyword">extends</span> <span class="title">CController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'logger - index'</span>,</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'application.filters.HelloFilter + index'</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> filterLogger($filterChain) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'before'</span>;</span><br><span class="line">        $filterChain -&gt; run();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'after'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloFilter</span> <span class="keyword">extends</span> <span class="title">CFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">preFilter</span><span class="params">($filterChain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// this -&gt; filter invoke $filterChain -&gt; run()</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">postFilter</span><span class="params">($filterChain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'World'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparion</span></span><br><span class="line"><span class="comment">// Koa: Expressive HTTP middleware framework for node.js</span></span><br><span class="line"><span class="keyword">import</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before'</span>)</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'after'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> ctx.body = <span class="string">'Hello World'</span>)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h4 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">CController</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">$factory = Factory::getInstance();</span><br><span class="line"><span class="keyword">$this</span> -&gt; $name = $factory -&gt; getClass($name);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span> -&gt; $name;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name, $value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span> -&gt; $name = $value;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h3 id="Db"><a href="#Db" class="headerlink" title="Db"></a>Db</h3><h5 id="multiple-databases"><a href="#multiple-databases" class="headerlink" title="multiple databases"></a>multiple databases</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.php</span></span><br><span class="line"><span class="string">'db_common'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'CDbConnection'</span>,</span><br><span class="line">    <span class="comment">// other config options</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="autoConnect"><a href="#autoConnect" class="headerlink" title="autoConnect"></a>autoConnect</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$connection = Yii::app() -&gt; db;</span><br></pre></td></tr></table></figure><h5 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$connection = <span class="keyword">new</span> CDbConnection($dsn, $username, $password);</span><br><span class="line">$connection -&gt; active = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><h4 id="Database-Access-Objects"><a href="#Database-Access-Objects" class="headerlink" title="Database Access Objects"></a>Database Access Objects</h4><h5 id="command"><a href="#command" class="headerlink" title="command"></a>command</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$command = $connection -&gt; createCommand($sql);</span><br></pre></td></tr></table></figure><h5 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$command -&gt; execute();</span><br></pre></td></tr></table></figure><h5 id="query"><a href="#query" class="headerlink" title="query"></a>query</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$dataReader = $command -&gt; query(); <span class="comment">// forward-only stream</span></span><br><span class="line">$data = $dataReader -&gt; readAll();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data = $command -&gt; queryAll();</span><br><span class="line">$data = $command -&gt; queryRow();</span><br><span class="line">$data = $command -&gt; queryColumn();</span><br><span class="line">$data = $command -&gt; queryScalar();</span><br></pre></td></tr></table></figure><h5 id="transaction"><a href="#transaction" class="headerlink" title="transaction"></a>transaction</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$transaction = $connection -&gt; beginTransaction();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// sql</span></span><br><span class="line">    $transaction -&gt; commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">Exception</span> $err) &#123;</span><br><span class="line">    $transaction -&gt; rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">'SELECT name FROM students WHERE id=:id'</span>;</span><br><span class="line">$command = $connection -&gt; createCommand($sql);</span><br><span class="line">$command -&gt; bindParam(<span class="string">':id'</span>, $id);</span><br><span class="line">$command -&gt; bindValue(<span class="string">':id'</span>, <span class="number">0</span>);</span><br><span class="line">$data = $command -&gt; queryRow();</span><br></pre></td></tr></table></figure><h4 id="Query-Builder"><a href="#Query-Builder" class="headerlink" title="Query Builder"></a>Query Builder</h4><h5 id="command-1"><a href="#command-1" class="headerlink" title="command"></a>command</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$command = $connection -&gt; createCommand()</span><br><span class="line">    -&gt; select(<span class="string">'name'</span>)</span><br><span class="line">    -&gt; from(<span class="string">'students'</span>)</span><br><span class="line">    -&gt; where(<span class="string">'id=:id'</span>, <span class="keyword">array</span>(<span class="string">':id'</span> =&gt; $id));</span><br></pre></td></tr></table></figure><h4 id="Active-Record"><a href="#Active-Record" class="headerlink" title="Active Record"></a>Active Record</h4><h5 id="model"><a href="#model" class="headerlink" title="model"></a>model</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">model</span><span class="params">($className=__CLASS__)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::model($className);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'students'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">primaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'id'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'name'</span>, <span class="string">'length'</span>, <span class="string">'max'</span> =&gt; <span class="number">30</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">relations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'papers'</span> =&gt; <span class="keyword">array</span>(<span class="keyword">self</span>::HAS_MANY, <span class="string">'Paper'</span>, <span class="string">'author_id'</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paper</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">model</span><span class="params">($className=__CLASS__)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::model($className);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'papers'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">primaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'id'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">relations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'author'</span> =&gt; <span class="keyword">array</span>(<span class="keyword">self</span>::BELONGS_TO, <span class="string">'Student'</span>, <span class="string">'author_id'</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$connection = Student::model() -&gt; dbConnection;</span><br></pre></td></tr></table></figure><h5 id="create"><a href="#create" class="headerlink" title="create"></a>create</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$student = <span class="keyword">new</span> Student;</span><br><span class="line">$student -&gt; id = <span class="number">0</span>;</span><br><span class="line">$student -&gt; name = <span class="string">'yanshi'</span>;</span><br><span class="line">$student -&gt; save(); <span class="comment">// validation: invoke $student -&gt; rules()</span></span><br></pre></td></tr></table></figure><h5 id="retrieve-2"><a href="#retrieve-2" class="headerlink" title="retrieve"></a>retrieve</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$student = Student::model() -&gt; find(<span class="string">'id=:id'</span>, <span class="keyword">array</span>(<span class="string">':id'</span> =&gt; $id));</span><br><span class="line">$student = Student::model() -&gt; find(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'condition'</span> =&gt; <span class="string">'id=:id'</span>,</span><br><span class="line">    <span class="string">'param'</span> =&gt; <span class="keyword">array</span>(<span class="string">':id'</span> =&gt; $id),</span><br><span class="line">))</span><br><span class="line">$student = Student::model() -&gt; findByPk($id);</span><br><span class="line">$student = Student::model() -&gt; findByAttributes(<span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'yanshi'</span>));</span><br><span class="line">$student = Student::model()</span><br><span class="line">    -&gt; findBySql(<span class="string">'SELECT name FROM students WHERE id=:id'</span>, <span class="keyword">array</span>(<span class="string">':id'</span> =&gt; $id));</span><br><span class="line"><span class="comment">// find would return null if not found</span></span><br><span class="line"><span class="comment">// findAll would return an empty array if not found</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$count = Student::model() -&gt; count(<span class="string">'name=:name'</span>, <span class="keyword">array</span>(<span class="string">':name'</span> =&gt; <span class="string">'yanshi'</span>));</span><br><span class="line">$count = Student::model()</span><br><span class="line">    -&gt; countBySql(<span class="string">'SELECT count(*) FROM students WHERE name=:name'</span>, <span class="keyword">array</span>(<span class="string">':name'</span> =&gt; <span class="string">'yanshi'</span>));</span><br><span class="line">$exists = $students -&gt; exists(<span class="string">'name=:name'</span>, <span class="keyword">array</span>(<span class="string">':name'</span> =&gt; <span class="string">'yanshi'</span>));</span><br></pre></td></tr></table></figure><h5 id="update"><a href="#update" class="headerlink" title="update"></a>update</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$student = Student::model() -&gt; findByPk(<span class="number">0</span>);</span><br><span class="line">$student -&gt; name = <span class="string">'fanxue'</span>;</span><br><span class="line">$student -&gt; save();</span><br></pre></td></tr></table></figure><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$student -&gt; delete();</span><br></pre></td></tr></table></figure><h5 id="join-1"><a href="#join-1" class="headerlink" title="join"></a>join</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$papers = Paper::model() -&gt; findAll(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'condition'</span> =&gt; <span class="string">'author.id=:id'</span>,</span><br><span class="line">    <span class="string">'param'</span> =&gt; <span class="keyword">array</span>(<span class="string">':id'</span> =&gt; $id),</span><br><span class="line">    <span class="string">'with'</span> =&gt; <span class="keyword">array</span>(<span class="string">'author'</span>),</span><br><span class="line">));</span><br></pre></td></tr></table></figure><h5 id="区别bindParam，bindValue，bindValues"><a href="#区别bindParam，bindValue，bindValues" class="headerlink" title="区别bindParam，bindValue，bindValues"></a>区别bindParam，bindValue，bindValues</h5><ul><li>bindParam 绑定变量的引用</li><li>bindValue 绑定变量的值或者常量值</li><li>bindValues 绑定多个值</li></ul><h5 id="AR调用save具体对应哪些操作"><a href="#AR调用save具体对应哪些操作" class="headerlink" title="AR调用save具体对应哪些操作"></a>AR调用save具体对应哪些操作</h5><ul><li>$model 由 new 创建，执行 INSERT</li><li>$model 由 find 返回，执行 UPDATE</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$model -&gt; save(<span class="keyword">true</span>, $attributes); <span class="comment">// attributes need to be saved</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$model -&gt; updateAll($attributes, $condition, $param);</span><br><span class="line">$model -&gt; updateByPk($pk, $attributes, $condition, $param);</span><br></pre></td></tr></table></figure><h5 id="empty-isset各种调用情况的返回值"><a href="#empty-isset各种调用情况的返回值" class="headerlink" title="empty,isset各种调用情况的返回值"></a>empty,isset各种调用情况的返回值</h5><ul><li>empty<ul><li>“”</li><li>0</li><li>0.0</li><li>“0”</li><li>NULL</li><li>FALSE</li><li>array()</li><li>a variable declared, but without a value</li></ul></li><li>isset<ul><li>variable exsits and has value other than NULL</li></ul></li></ul><h5 id="解释Yii的路由解析"><a href="#解释Yii的路由解析" class="headerlink" title="解释Yii的路由解析"></a>解释Yii的路由解析</h5><ul><li><p>showScript: false</p></li><li><p>入口文件添加 .htaccess 配置 Apache</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Options +FollowSymLinks</span><br><span class="line">IndexIgnore *<span class="comment">/*</span></span><br><span class="line"><span class="comment">RewriteEngine on</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># if a directory or a file exists, use it directly</span></span><br><span class="line"><span class="comment">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span></span><br><span class="line"><span class="comment">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># otherwise forward it to index.php</span></span><br><span class="line"><span class="comment">RewriteRule . index.php</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="设置header"><a href="#设置header" class="headerlink" title="设置header"></a>设置header</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br></pre></td></tr></table></figure><h5 id="redirect和forward的区别"><a href="#redirect和forward的区别" class="headerlink" title="redirect和forward的区别"></a>redirect和forward的区别</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span> -&gt; redirect(<span class="keyword">$this</span> -&gt; createUrl(<span class="string">"$controller/$action"</span>));</span><br><span class="line"><span class="keyword">$this</span> -&gt; forward(<span class="string">"$controller/$action"</span>);</span><br></pre></td></tr></table></figure><h5 id="PHP怎么在长时间请求下不断往前端输出"><a href="#PHP怎么在长时间请求下不断往前端输出" class="headerlink" title="PHP怎么在长时间请求下不断往前端输出"></a>PHP怎么在长时间请求下不断往前端输出</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ob_get_level() || ob_start();</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; $i++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $i . <span class="string">' '</span>;</span><br><span class="line">    ob_flush();</span><br><span class="line">    flush();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">&#125;  </span><br><span class="line">ob_end_flush();</span><br></pre></td></tr></table></figure><h5 id="SESSION锁"><a href="#SESSION锁" class="headerlink" title="SESSION锁"></a>SESSION锁</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session_write_close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h1&gt;&lt;h3 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTTP1.0到HTTP2.0的演化</title>
    <link href="http://yoursite.com/2017/11/10/HTTP1.0%E5%88%B0HTTP2.0%E7%9A%84%E6%BC%94%E5%8C%96/"/>
    <id>http://yoursite.com/2017/11/10/HTTP1.0%E5%88%B0HTTP2.0%E7%9A%84%E6%BC%94%E5%8C%96/</id>
    <published>2017-11-10T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP历史"><a href="#HTTP历史" class="headerlink" title="HTTP历史"></a>HTTP历史</h1><p>全称：超文本传输协议(HyperText Transfer Protocol) 早在HTTP建立之初，主要就是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。也是说对于前端来说，我们所写的HTML页面将要放在我们的web服务器上，用户端通过浏览器访问url地址来获取网页的显示内容，但是到了WEB2.0以来，我们的页面变得复杂，不仅仅单纯的是一些简单的文字和图片，同时我们的HTML页面有了CSS，Javascript，来丰富我们的页面展示，随着ajax的出现，我们又多了一种向服务器端获取数据的方法，这些其实都是基于HTTP协议的。</p><p>自从1991年Tim Berners-Lee提出HTTP协议的设想到现在已经20多年过去了，在这20多年中Web的发展也是日新月异。为了满足不同时代Web的需求，HTTP协议的更新迭代经历了HTTP0.9、HTTP/1.0、HTTP/1.1、SPDY、HTTP/2几个版本。接下来就这几个版本的HTTP进行简要介绍。 </p><p><img src="E:timeline.png" alt="image"></p><h1 id="HTTP1-0"><a href="#HTTP1-0" class="headerlink" title="HTTP1.0"></a>HTTP1.0</h1><p>1991-1995年，随着Web浏览器的兴起，人们对Web页面的需求越来越多，最典型的就是人们不再满足于仅包含文本和超链接的超文本文档，而是需要能展现文字、样式、图片等多种媒体类型的数据。因此HTTP/0.9这种简单的传输协议很快就难以为继。1996年，HTTP-WG发布了了RFC1945，阐述了HTTP/1.0的主要特性：</p><ul><li>请求和响应有多个头部，请求行包含了协议版本</li><li>包含了响应行，主要包括协议版本和响应状态</li><li>响应头中包含了Content-Type，可以支持多种类型的影响内容</li><li>每个请求响应结束后，连接即关闭</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 请求 */</span><br><span class="line">GET /rfc/rfc1945.txt HTTP/1.0</span><br><span class="line">User-Agent: CERN-LineMode/2.15 libwww/2.17b3 Accept: */* /* 响应 */</span><br><span class="line">HTTP/1.0 200 OK</span><br><span class="line">ontent-Type: text/plain</span><br><span class="line">Content-Length: 137582</span><br><span class="line">Expires: Thu, 01 Dec 1997 16:00:00 GMT Last-Modified: Wed, 1 May 1996 12:45:26 GMT Server: Apache 0.84</span><br></pre></td></tr></table></figure><h1 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h1><p>1997年定义HTTP/1.1的RFC2068正式发布，随后在1999年发布的RFC2616中集合了对HTTP/1.1的改进和更新。总的来讲，HTTP/1.1主要明确了之前HTTP/1.0中存在歧义的点，并在此基础上增加了许多新特性：</p><ul><li>持久传输</li><li>分块编码传输</li><li>字节范围请求</li><li>传输编码</li><li>增强的缓存机制</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x#HTTP_pipelining/" target="_blank" rel="noopener">管道化请求</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 请求1</span><br><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: website.org</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4)... (snip)</span><br><span class="line"></span><br><span class="line">// 响应1</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.0.11</span><br><span class="line">Accept-Ranges: bytes // 如果不为none，代表server支持范围请求</span><br><span class="line">Connection: keep-alive // 持久传输，本次请求响应结束后不关闭连接</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Cache-Control: max-age=0, no-cache // 缓存控制</span><br><span class="line">Transfer-Encoding: chunked // 传输编码</span><br><span class="line"></span><br><span class="line">100 // 当前响应块大小（256Bytes）</span><br><span class="line">&lt;!doctype html&gt; ... (snip) // 响应内容</span><br><span class="line"></span><br><span class="line">100 // 另一块（256Bytes）</span><br><span class="line">... (snip) // 响应内容</span><br><span class="line"></span><br><span class="line">0 // 响应分块结束</span><br><span class="line"></span><br><span class="line">// 请求2</span><br><span class="line">GET /favicon.ico HTTP/1.1 // 上次请求未关闭连接，本次重用该连接</span><br><span class="line">Range: bytes=0-1023 // 请求字节范围</span><br><span class="line">Connection: close // 告知服务器本次请求响应后关闭连接</span><br><span class="line"></span><br><span class="line">// 响应2</span><br><span class="line">HTTP/1.1 200 OK // 第二次请求的响应行</span><br><span class="line">Content-Range: bytes 0-1023/146515 // 响应字节范围//整体字节数</span><br><span class="line">Connection: close // 告知浏览器响应完成或关闭该连接</span><br></pre></td></tr></table></figure><h1 id="HTTP1-0和1-1现存的一些问题"><a href="#HTTP1-0和1-1现存的一些问题" class="headerlink" title="HTTP1.0和1.1现存的一些问题"></a>HTTP1.0和1.1现存的一些问题</h1><ol><li>上面提到过的，HTTP1.x在传输数据时，每次都需要重新建立连接，无疑增加了大量的延迟时间，特别是在移动端更为突出。</li><li>HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。</li><li>HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量。</li><li>虽然HTTP1.x支持了keep-alive，来弥补多次创建连接产生的延迟，但是keep-alive使用多了同样会给服务端带来大量的性能压力，并且对于单个文件被不断请求的服务(例如图片存放网站)，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。</li></ol><h1 id="HTTPS应声而出"><a href="#HTTPS应声而出" class="headerlink" title="HTTPS应声而出"></a>HTTPS应声而出</h1><p>为了解决以上问题，网景在1994年创建了HTTPS，并应用在网景导航者浏览器中。 最初，HTTPS是与SSL一起使用的；在SSL逐渐演变到TLS时（其实两个是一个东西，只是名字不同而已），最新的HTTPS也由在2000年五月公布的RFC 2818正式确定下来。简单来说，HTTPS就是安全版的HTTP，并且由于当今时代对安全性要求更高，chrome和firefox都大力支持网站使用HTTPS，苹果也在ios 10系统中强制app使用HTTPS来传输数据，由此可见HTTPS势在必行。</p><h3 id="HTTPS与HTTP的一些区别"><a href="#HTTPS与HTTP的一些区别" class="headerlink" title="HTTPS与HTTP的一些区别"></a>HTTPS与HTTP的一些区别</h3><ul><li>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。</li><li>HTTP是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的SSL加密传输协议。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTPS的连接很简单，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。<h1 id="SPDY-amp-HTTP-2"><a href="#SPDY-amp-HTTP-2" class="headerlink" title="SPDY &amp; HTTP/2"></a>SPDY &amp; HTTP/2</h1></li></ul><p>从诞生之日到今天，HTTP/1.1以其顽强的生命力伴随一代人见证了Web的繁荣发展。但面对网络中越来越多的请求、网页规模的膨胀，HTTP/1.1逐渐开始表现得力不从心，主要表现在以下几个问题上：</p><ul><li>头阻塞：HTTP/1.1中只有该请求响应后才能重用当前连接发送下一次请求，即使管道化技术使得可以在本次响应完成之前发送下次请求，但响应依然严格按照顺序返回，也就是如果前一个响应被阻塞，后边的响应将不会到来。</li><li>重复的未压缩头数据传输：自HTTP/1.0以后，HTTP请求中通常带有大量以ASCII编码的头部，这些头部通常大部分都不会变化，每次请求都会携带，这给本就拥挤不堪的网络带来了更多的压力（尤其是像User Agent、Cookie这种值比较长的头部字段）。</li></ul><p>2009年，Google提出了一项实验性的协议SPDY（读音同speedy），旨在开发者不修改当前网站实现的前提下，提高页面加载速度。SPDY提出后，Chrome、Firefox、Opera等主流浏览器先后给出了实现，很多大型网站（如Google、Twitter、Facebook等）分别提供了其对SPDY会话的实现。2012年，HTTP-WG提出了在SPDY基础上构建HTTP/2的草案，2013年给出了第一个对HTTP/2的实现，自此HTTP/2、SPDY并行发展，在客户端和服务器上进行了广泛可靠的测试。2015年，Google 宣布放弃对SPDY的继续支持，标志着HTTP/2正式登上历史舞台。</p><h1 id="HTTP-2-0-新特性"><a href="#HTTP-2-0-新特性" class="headerlink" title="HTTP/2.0 新特性"></a>HTTP/2.0 新特性</h1><ul><li><p><strong>新的二进制格式</strong>（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p></li><li><p><strong>多路复用</strong>（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的id将request再归属到各自不同的服务端请求里面。<br>  多路复用原理图：<img src="E:duolufuyong.png" alt="image"></p></li><li><p><strong>header压缩</strong>，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p></li><li><p><strong>服务端推送</strong>（server push）简单来讲，Server Push就是允许Server对还没有发出的请求进行响应。</p></li><li><p><strong>流的优先级</strong>，在HTTP/2中，请求和响应是可以乱序传输的，因此我们需要一个机制可以确保哪些被其他响应数据所依赖的或者关键资源被优先传输，以使网页的呈现和使用具有最好的体验。HTTP/2中在流的层面，采用了“优先级树”的形式确保响应数据能够按照依赖关系和优先级顺序来传输。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>为什么要用HTTP/2？</strong></p><p>HTTP/1.x中的头阻塞问题会造成连接总是处于等待响应的状态，而未充分利用带宽；HTTP/1.x大量、重复的请求头在网络上传输，使网络负载了很大一部分本需要传输的数据量。</p><p><strong>HTTP/2能带给我们什么？</strong></p><p>除了解决了上述HTTP/1.x的问题，新的协议还包含了Server Push、流的优先级传输等新特性，使性能得到进一步提升。</p><p><strong>如何升级？</strong></p><p>目前的主流浏览器均已支持，因此一般情况下只需要升级服务端即可。三种方案：找一个支持HTTP/2的CDN部署网站中的静态资源；升级代理服务器；升级所有服务器。</p><p><strong>HTTP/2实际表现如何？</strong></p><p>在存在大量请求、延时受限的环境下，HTTP/2的性能表现相较于HTTP/1.x有明显优势。但考虑到HTTP/2尚年幼，很多特性的实现还未完善，许多特性的表现可能并非理想。因此在线上升级之前要做充分的测试，确保所采用的实现能够支持你需的特性，其缺陷不会对性能造成重大影响。</p><p><strong>关于HTTP1.x的一些优化方式，例如文件合并压缩，资源cdn，js，css优化等等同样使用与HTTP2.0和HTTPS，所以web前端的优化，还是要继续进行。</strong></p><p>参考：<a href="https://juejin.im/post/59e46b2651882578b8185a05" target="_blank" rel="noopener">https://juejin.im/post/59e46b2651882578b8185a05</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP历史&quot;&gt;&lt;a href=&quot;#HTTP历史&quot; class=&quot;headerlink&quot; title=&quot;HTTP历史&quot;&gt;&lt;/a&gt;HTTP历史&lt;/h1&gt;&lt;p&gt;全称：超文本传输协议(HyperText Transfer Protocol) 早在HTTP建立之初，主要就
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Event Loop（转自阮一峰老师）</title>
    <link href="http://yoursite.com/2017/10/10/Event%20Loop%EF%BC%88%E8%BD%AC%E8%87%AA%E9%98%AE%E4%B8%80%E5%B3%B0%E8%80%81%E5%B8%88%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/10/Event%20Loop%EF%BC%88%E8%BD%AC%E8%87%AA%E9%98%AE%E4%B8%80%E5%B3%B0%E8%80%81%E5%B8%88%EF%BC%89/</id>
    <published>2017-10-10T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.639Z</updated>
    
    <content type="html"><![CDATA[<p>每次看阮一峰老师的博客，心总能静下来，冷静的思考问题，下面记录一下这篇让我受益匪浅的技术文章。</p><p>出处：<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></p><h1 id="一、为什么JavaScript是单线程？"><a href="#一、为什么JavaScript是单线程？" class="headerlink" title="一、为什么JavaScript是单线程？"></a>一、为什么JavaScript是单线程？</h1><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p><h1 id="二、任务队列"><a href="#二、任务队列" class="headerlink" title="二、任务队列"></a>二、任务队列</h1><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</p><p>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<br>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p><ol><li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</li><li>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</li><li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li><li>主线程不断重复上面的第三步。<br>下图就是主线程和任务队列的示意图。</li></ol><p><img src="/images/taskQ.jpg" alt="任务队列"></p><p>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。</p><h1 id="三、事件和回调函数"><a href="#三、事件和回调函数" class="headerlink" title="三、事件和回调函数"></a>三、事件和回调函数</h1><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。</p><p>“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。</p><p>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</p><p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p><h1 id="四、Event-Loop"><a href="#四、Event-Loop" class="headerlink" title="四、Event Loop"></a>四、Event Loop</h1><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p><p>为了更好地理解Event Loop，请看下图（转引自Philip Roberts的演讲《Help, I’m stuck in an event-loop》）。</p><p><img src="/images/eloop.png" alt="Event Loop"></p><p>上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p><p>执行栈中的代码（同步任务），总是在读取”任务队列”（异步任务）之前执行。请看下面这个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var req = new XMLHttpRequest();</span><br><span class="line">    req.open(&apos;GET&apos;, url);    </span><br><span class="line">    req.onload = function ()&#123;&#125;;    </span><br><span class="line">    req.onerror = function ()&#123;&#125;;    </span><br><span class="line">    req.send();</span><br></pre></td></tr></table></figure><p>上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取”任务队列”。所以，它与下面的写法等价。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var req = new XMLHttpRequest();</span><br><span class="line">    req.open(&apos;GET&apos;, url);</span><br><span class="line">    req.send();</span><br><span class="line">    req.onload = function ()&#123;&#125;;    </span><br><span class="line">    req.onerror = function ()&#123;&#125;;</span><br></pre></td></tr></table></figure><p>也就是说，指定回调函数的部分（onload和onerror），在send()方法的前面或后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会去读取”任务队列”。</p><h1 id="五、定时器"><a href="#五、定时器" class="headerlink" title="五、定时器"></a>五、定时器</h1><p>除了放置异步任务的事件，”任务队列”还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做”定时器”（timer）功能，也就是定时执行的代码。<br>定时器功能主要由setTimeout()和setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论setTimeout()。</p><p>setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(1);</span><br><span class="line">setTimeout(function()&#123;console.log(2);&#125;,1000);</span><br><span class="line">console.log(3);</span><br></pre></td></tr></table></figure><p>上面代码的执行结果是1，3，2，因为setTimeout()将第二行推迟到1000毫秒之后执行。</p><p>如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;console.log(1);&#125;, 0);</span><br><span class="line">console.log(2);</span><br></pre></td></tr></table></figure><p>上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行”任务队列”中的回调函数。</p><p>总之，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在”任务队列”的尾部添加一个事件，因此要等到同步任务和”任务队列”现有的事件都处理完，才会得到执行。</p><p>HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。</p><p>需要注意的是，setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次看阮一峰老师的博客，心总能静下来，冷静的思考问题，下面记录一下这篇让我受益匪浅的技术文章。&lt;/p&gt;
&lt;p&gt;出处：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&quot; target=&quot;_blank
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>对Js赋值运算的新认识</title>
    <link href="http://yoursite.com/2017/09/29/%E5%AF%B9Js%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%9A%84%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2017/09/29/%E5%AF%B9Js%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%9A%84%E6%96%B0%E8%AE%A4%E8%AF%86/</id>
    <published>2017-09-29T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.642Z</updated>
    
    <content type="html"><![CDATA[<p>此文的目的是为了解释如下现象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo = &#123; n: 1 &#125;;</span><br><span class="line">var bar = foo;</span><br><span class="line">foo.x = foo = &#123; n: 2 &#125;;</span><br><span class="line">console.log(foo.x); // undefined</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>关键点在于它的返回值，用一个栗子来解释就是说：如果有表达式foo.x，则它的返回值是一个指向foo对象x属性的引用。</p><p>那么在知道了这一点后，开始解释上面的现象：<br>首先是两个变量的声明和初始化，var foo = { n: 1 }; var bar = foo;，这个很好理解，就是foo和bar同时指向了一个相同的对象{ n: 1 }。</p><p>接下来，对于表达式foo.x = foo = { n: 2 };，我们都知道它实际上等于是foo.x = (foo = { n: 2 })。我们开始应用上ECMA规范上的步骤，虽然赋值运算符具有<strong>右结合性</strong>，然而它首先做的是得到表达式foo.x的值，根据我们对Property Accessors的解释它返回一个指向对象{ n: 1}的x成员的引用，需要注意的是，这个时候foo并没有改变引用的指向。</p><p>继续，开始计算右边的结果，就是让foo指向另外的一个对象{n: 2}，返回值就是其右边运算式的结果，即对象{n: 2}这个容易理解。</p><p>那么现在应该清楚了，赋值语句中foo.x的结果是指向对象一成员x的引用，而下面的console.log(foo.x)中的foo指向的是对象二，所以这里foo.x返回undefined就理所当然了。<br>所以试着输出对象一，即bar（因为它从始至终指向的是对象一）：</p><p>{ n: 1, x: { n: 2 } }</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文的目的是为了解释如下现象：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Execution Context</title>
    <link href="http://yoursite.com/2017/09/29/%E7%90%86%E8%A7%A3JavaScript%E7%9A%84%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://yoursite.com/2017/09/29/%E7%90%86%E8%A7%A3JavaScript%E7%9A%84%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2017-09-29T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="执行上下文（Execution-Context）"><a href="#执行上下文（Execution-Context）" class="headerlink" title="执行上下文（Execution Context）"></a>执行上下文（Execution Context）</h1><p>在JavaScript中有三种代码运行环境：</p><ul><li>全局环境Global Code<br>JavaScript代码开始运行的默认环境</li><li>函数环境Function Code<br>代码进入一个JavaScript函数</li><li>Eval Code<br>使用eval()执行代码  </li></ul><p>为了表示不同的运行环境，JavaScript中有一个执行上下文（Execution context，EC）的概念。也就是说，当JavaScript代码执行的时候，会进入不同的执行上下文，这些执行上下文就构成了一个执行上下文栈（Execution context stack，ECS）。</p><h1 id="变量对象（Variable-object）"><a href="#变量对象（Variable-object）" class="headerlink" title="变量对象（Variable object）"></a>变量对象（Variable object）</h1><p>我们知道 变量和执行上下文相关 那么它就应该知道数据储存在哪里以及如何访问这些数据，这种机制被称为变量对象（Variable Object）简称VO。<br>处理执行上下文代码分为两个阶段:<br>①进入执行上下文<br>②执行代码<br>当进入执行上下文时（代码执行前），变量对象VO 就会被下列属性填充：  </p><ol><li>函数的所有形参（如果是在函数执行上下文中）<br>每个形参都对应变量对象中的一个属性，该属性由形参名和对应的实参值构成，如果没有传递实参，那么该属性值就为 undefined</li><li>所有函数声明（FunctionDeclaration, FD）<br>每个函数声明都对应变量对象中的一个属性，这个属性由一个函数对象的名称和值构成，如果变量对象中存在相同的属性名，则完全替换该属性。</li><li>所有变量声明（var, VariableDeclaration）<br>每个变量声明都对应变量对象中的一个属性，该属性的键/值是变量名和 undefined，如果变量名与已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性。</li></ol><h1 id="活动对象（Activation-object）"><a href="#活动对象（Activation-object）" class="headerlink" title="活动对象（Activation object）"></a>活动对象（Activation object）</h1><p>只有全局上下文的变量对象允许通过VO的属性名称间接访问；在函数执行上下文中，VO是不能直接访问的，此时由激活对象(简称AO)扮演VO的角色。激活对象 是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。  </p><p>Arguments Objects 是函数上下文里的激活对象AO中的内部对象，它包括下列属性：</p><ol><li>callee：指向当前函数的引用</li><li>length： 真正传递的参数的个数</li><li>properties-indexes：就是函数的参数值(按参数列表从左到右排列)  </li></ol><p>对于VO和AO的关系可以理解为，VO在不同的Execution Context中会有不同的表现：当在Global Execution Context中，可以直接使用VO；但是，在函数Execution Context中，AO就会被创建。</p><h1 id="JS解析器做了什么"><a href="#JS解析器做了什么" class="headerlink" title="JS解析器做了什么"></a>JS解析器做了什么</h1><p>当一段JavaScript代码执行的时候，JavaScript解释器会创建执行上下文，其实这里会有两个阶段：</p><p><strong>1.创建阶段</strong>（进入执行上下文）</p><ul><li>创建作用域链Scope chain</li><li>创建VO/AO（variables, functions and arguments）</li><li>设置this的值  </li></ul><p><strong>2.激活阶段</strong>（执行代码）<br>设置变量的值、函数的引用，然后解释/执行代码。  </p><p>对于”创建VO/AO”这一步，JavaScript解释器主要做了下面的事情：  </p><ul><li>根据函数的参数，创建并初始化参数对象</li></ul><ul><li><p>扫描函数内部代码，查找函数声明</p><ul><li>对于所有找到的函数声明，将函数名和函数引用存入VO/AO中</li><li><strong>如果VO/AO中已经有同名的函数，那么就进行覆盖</strong>   </li></ul></li><li><p>扫描函数内部代码，查找变量声明</p><ul><li>对于所有找到的变量声明，将变量名存入VO/AO中，并初始化为”undefined”</li><li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li></ul></li></ul><h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><p>理解概念很枯燥，我们来分析实例。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">var a = 1;</span><br><span class="line">console.log(a);</span><br><span class="line">function a()&#123;alert(2)&#125;</span><br><span class="line">console.log(a);</span><br><span class="line">var a = 3;</span><br><span class="line">console.log(a);</span><br><span class="line">function a() &#123;alert(4);&#125;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><h3 id="分析流程如下"><a href="#分析流程如下" class="headerlink" title="分析流程如下:"></a>分析流程如下:</h3><p><strong>进入执行上下文（创建阶段）填充vo对象</strong>   </p><ol><li><p>第二行有var定义的变量a，将其保存为a=undefined;</p></li><li><p>第4行有function声明和第二行的a同名此时由于函数的等级高于变量，于是就覆盖变量a，此时a= function a (){ alert(2); }</p></li><li><p>第六行又发现一个var定义的变量，名称与第四行的函数相同，但等级低，故a= function a (){ alert(2); }不变。</p></li><li><p>同理，由于第八行后定义，又为同一等级的函数，所以a= function a (){ alert(4); }</p></li><li><p>浏览器解析完成<br>此时的<br>vo= {<br>a:<br>}</p><p><strong>执行代码（激活阶段）</strong></p></li><li><p>第一行 a应该是打印function a() {alert(4);}</p></li><li><p>第二行表达式修改了a的值，使其为1，所以第三行输出a=1</p></li><li><p>第四行定义了一个函数，但没有执行，所以第五行输出还为1</p></li><li><p>第六行表达式又一次更改了a的值，现在a=3，此时的a为一个数字，第七行输出3</p></li><li><p>同理，第八行没有做更改，第九行还是输出3</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;执行上下文（Execution-Context）&quot;&gt;&lt;a href=&quot;#执行上下文（Execution-Context）&quot; class=&quot;headerlink&quot; title=&quot;执行上下文（Execution Context）&quot;&gt;&lt;/a&gt;执行上下文（Executio
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS：box-shadow属性探秘</title>
    <link href="http://yoursite.com/2017/09/28/box-shadow%E5%B1%9E%E6%80%A7%E6%8E%A2%E7%A7%98/"/>
    <id>http://yoursite.com/2017/09/28/box-shadow%E5%B1%9E%E6%80%A7%E6%8E%A2%E7%A7%98/</id>
    <published>2017-09-28T14:01:00.000Z</published>
    <updated>2019-11-20T14:58:45.640Z</updated>
    
    <content type="html"><![CDATA[<p>在学习CSS3时发现了box-shadow 这一奇妙又强大的属性，于是利用它结合CSS3动画做了一些loading效果图。<br>演示地址：<a href="https://zyydeer.github.io/loader/loader.html" target="_blank" rel="noopener">戳我</a><br>下面让我们来探索这个奇妙的属性值。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>box-shadow 属性值由六部分组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: offset-x offset-y blur spread color position;</span><br></pre></td></tr></table></figure><p>一定要注意顺序。  </p><h2 id="offset-x"><a href="#offset-x" class="headerlink" title="offset-x"></a>offset-x</h2><p>offset-x 用来声明阴影的水平偏移，即阴影在 X 轴上的位置。当值为正数，阴影位于元素的右侧，若值为负数，阴影位于元素的左侧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left &#123; box-shadow: 20px 0px 10px 0px rgba(0,0,0,0.5) &#125;</span><br><span class="line"></span><br><span class="line">.right &#123; box-shadow: -20px 0px 10px 0px rgba(0,0,0,0.5) &#125;</span><br></pre></td></tr></table></figure><h2 id="offset-y"><a href="#offset-y" class="headerlink" title="offset-y"></a>offset-y</h2><p>offset-y 用来声明阴影的垂直偏移，即阴影在 Y 轴上的位置。当值为正数，阴影位于元素的下面，若值为负数，阴影位于元素的上面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left &#123; box-shadow: 0px 20px 10px 0px rgba(0,0,0,0.5) &#125;</span><br><span class="line"></span><br><span class="line">.right &#123; box-shadow: 0px -20px 10px 0px rgba(0,0,0,0.5) &#125;</span><br></pre></td></tr></table></figure><h2 id="blur"><a href="#blur" class="headerlink" title="blur"></a>blur</h2><p>blur 表示阴影的模糊半径。效果同高斯模糊滤镜。值为 0 意味着阴影完全不模糊。blur 值越大，边角越不锋利，阴影越朦胧。不允许负值，负值等同于 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.left &#123; box-shadow: 0px 0px 0px 0px rgba(0,0,0,0.5) &#125;</span><br><span class="line"></span><br><span class="line">.middle &#123; box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.5) &#125;</span><br><span class="line"></span><br><span class="line">.right &#123; box-shadow: 0px 0px 50px 0px rgba(0,0,0,0.5) &#125;</span><br></pre></td></tr></table></figure><h2 id="spread"><a href="#spread" class="headerlink" title="spread"></a>spread</h2><p>spread 表示阴影的大小。也可以把这个值看做阴影与元素之间的距离。当值为正数，阴影会向四周扩展。若值为负数，阴影会收缩，小于元素尺寸。默认值 0 会保持阴影和元素尺寸一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.left &#123; box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.5) &#125;</span><br><span class="line"></span><br><span class="line">.middle &#123; box-shadow: 0px 0px 20px 20px rgba(0,0,0,0.5) &#125;</span><br><span class="line"></span><br><span class="line">.right &#123; box-shadow: 0px 50px 20px -20px rgba(0,0,0,0.5) &#125;</span><br></pre></td></tr></table></figure><h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><p>color 表示阴影的颜色。可以是任何颜色单位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left &#123; box-shadow: 0px 0px 20px 10px #67b3dd &#125;</span><br><span class="line"></span><br><span class="line">.right &#123; box-shadow: 0px 0px 20px 10px rgba(0,0,0,0.5) &#125;</span><br></pre></td></tr></table></figure><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>position 表示阴影的位置，可选项。默认为外部阴影。可以通过使用 inset 关键字来制作内部阴影。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left &#123; box-shadow: 20px 20px 10px 0px rgba(0,0,0,0.5) inset &#125;</span><br><span class="line"></span><br><span class="line">.right &#123; box-shadow: 20px 20px 10px 0px rgba(0,0,0,0.5) &#125;</span><br></pre></td></tr></table></figure><h2 id="多重阴影"><a href="#多重阴影" class="headerlink" title="多重阴影"></a>多重阴影</h2><p>一个元素的 box-shadow 属性可以接受多个阴影声明，组成一个逗号分隔的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.foo &#123; </span><br><span class="line">    box-shadow: 20px 20px 10px 0px rgba(0,0,0,0.5) inset, /* inner shadow */</span><br><span class="line">                20px 20px 10px 0px rgba(0,0,0,0.5); /* outer shadow */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="圆角阴影"><a href="#圆角阴影" class="headerlink" title="圆角阴影"></a>圆角阴影</h2><p>box-shadow 属性的 border-radius 由同一个元素的 border-radius 属性来控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.foo &#123; </span><br><span class="line">    box-shadow: 20px 20px 10px 0px rgba(0,0,0,0.5);</span><br><span class="line">    border-raduis: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这六个属性值，不需要额外添加dom元素或是伪元素，就可以创造出各种图形效果，是不是很神奇呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习CSS3时发现了box-shadow 这一奇妙又强大的属性，于是利用它结合CSS3动画做了一些loading效果图。&lt;br&gt;演示地址：&lt;a href=&quot;https://zyydeer.github.io/loader/loader.html&quot; target=&quot;_bla
      
    
    </summary>
    
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
